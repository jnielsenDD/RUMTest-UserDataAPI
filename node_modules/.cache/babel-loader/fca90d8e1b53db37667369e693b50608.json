{"ast":null,"code":"import { performDraw, startSessionManagement } from '@datadog/browser-core';\nexport var LOGGER_SESSION_KEY = 'logs';\nexport var LoggerTrackingType;\n\n(function (LoggerTrackingType) {\n  LoggerTrackingType[\"NOT_TRACKED\"] = \"0\";\n  LoggerTrackingType[\"TRACKED\"] = \"1\";\n})(LoggerTrackingType || (LoggerTrackingType = {}));\n\nexport function startLoggerSession(configuration, areCookieAuthorized) {\n  if (!areCookieAuthorized) {\n    var isTracked_1 = computeTrackingType(configuration) === LoggerTrackingType.TRACKED;\n    return {\n      getId: function getId() {\n        return undefined;\n      },\n      isTracked: function isTracked() {\n        return isTracked_1;\n      }\n    };\n  }\n\n  var session = startSessionManagement(configuration.cookieOptions, LOGGER_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  });\n  return {\n    getId: session.getId,\n    isTracked: function isTracked() {\n      return session.getTrackingType() === LoggerTrackingType.TRACKED;\n    }\n  };\n}\n\nfunction computeTrackingType(configuration) {\n  if (!performDraw(configuration.sampleRate)) {\n    return LoggerTrackingType.NOT_TRACKED;\n  }\n\n  return LoggerTrackingType.TRACKED;\n}\n\nfunction computeSessionState(configuration, rawSessionType) {\n  var trackingType = hasValidLoggerSession(rawSessionType) ? rawSessionType : computeTrackingType(configuration);\n  return {\n    trackingType: trackingType,\n    isTracked: trackingType === LoggerTrackingType.TRACKED\n  };\n}\n\nfunction hasValidLoggerSession(trackingType) {\n  return trackingType === LoggerTrackingType.NOT_TRACKED || trackingType === LoggerTrackingType.TRACKED;\n}","map":{"version":3,"sources":["../../src/domain/loggerSession.ts"],"names":[],"mappings":"AAAA,SAAwB,WAAxB,EAAqC,sBAArC,QAAmE,uBAAnE;AAEA,OAAO,IAAM,kBAAkB,GAAG,MAA3B;AAOP,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC5B,EAAA,kBAAA,CAAA,aAAA,CAAA,GAAA,GAAA;AACA,EAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,GAAA;AACD,CAHD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B;;AAKA,OAAM,SAAU,kBAAV,CAA6B,aAA7B,EAA2D,mBAA3D,EAAuF;AAC3F,MAAI,CAAC,mBAAL,EAA0B;AACxB,QAAM,WAAS,GAAG,mBAAmB,CAAC,aAAD,CAAnB,KAAuC,kBAAkB,CAAC,OAA5E;AACA,WAAO;AACL,MAAA,KAAK,EAAE,iBAAA;AAAM,eAAA,SAAA;AAAS,OADjB;AAEL,MAAA,SAAS,EAAE,qBAAA;AAAM,eAAA,WAAA;AAAS;AAFrB,KAAP;AAID;;AACD,MAAM,OAAO,GAAG,sBAAsB,CAAC,aAAa,CAAC,aAAf,EAA8B,kBAA9B,EAAkD,UAAC,eAAD,EAAgB;AACtG,WAAA,mBAAmB,CAAC,aAAD,EAAgB,eAAhB,CAAnB;AAAmD,GADf,CAAtC;AAGA,SAAO;AACL,IAAA,KAAK,EAAE,OAAO,CAAC,KADV;AAEL,IAAA,SAAS,EAAE,qBAAA;AAAM,aAAA,OAAO,CAAC,eAAR,OAA8B,kBAAkB,CAAhD,OAAA;AAAwD;AAFpE,GAAP;AAID;;AAED,SAAS,mBAAT,CAA6B,aAA7B,EAAyD;AACvD,MAAI,CAAC,WAAW,CAAC,aAAa,CAAC,UAAf,CAAhB,EAA4C;AAC1C,WAAO,kBAAkB,CAAC,WAA1B;AACD;;AACD,SAAO,kBAAkB,CAAC,OAA1B;AACD;;AAED,SAAS,mBAAT,CAA6B,aAA7B,EAA2D,cAA3D,EAAkF;AAChF,MAAM,YAAY,GAAG,qBAAqB,CAAC,cAAD,CAArB,GAAwC,cAAxC,GAAyD,mBAAmB,CAAC,aAAD,CAAjG;AACA,SAAO;AACL,IAAA,YAAY,EAAA,YADP;AAEL,IAAA,SAAS,EAAE,YAAY,KAAK,kBAAkB,CAAC;AAF1C,GAAP;AAID;;AAED,SAAS,qBAAT,CAA+B,YAA/B,EAAoD;AAClD,SAAO,YAAY,KAAK,kBAAkB,CAAC,WAApC,IAAmD,YAAY,KAAK,kBAAkB,CAAC,OAA9F;AACD","sourceRoot":"","sourcesContent":["import { performDraw, startSessionManagement } from '@datadog/browser-core';\nexport var LOGGER_SESSION_KEY = 'logs';\nexport var LoggerTrackingType;\n(function (LoggerTrackingType) {\n    LoggerTrackingType[\"NOT_TRACKED\"] = \"0\";\n    LoggerTrackingType[\"TRACKED\"] = \"1\";\n})(LoggerTrackingType || (LoggerTrackingType = {}));\nexport function startLoggerSession(configuration, areCookieAuthorized) {\n    if (!areCookieAuthorized) {\n        var isTracked_1 = computeTrackingType(configuration) === LoggerTrackingType.TRACKED;\n        return {\n            getId: function () { return undefined; },\n            isTracked: function () { return isTracked_1; },\n        };\n    }\n    var session = startSessionManagement(configuration.cookieOptions, LOGGER_SESSION_KEY, function (rawTrackingType) {\n        return computeSessionState(configuration, rawTrackingType);\n    });\n    return {\n        getId: session.getId,\n        isTracked: function () { return session.getTrackingType() === LoggerTrackingType.TRACKED; },\n    };\n}\nfunction computeTrackingType(configuration) {\n    if (!performDraw(configuration.sampleRate)) {\n        return LoggerTrackingType.NOT_TRACKED;\n    }\n    return LoggerTrackingType.TRACKED;\n}\nfunction computeSessionState(configuration, rawSessionType) {\n    var trackingType = hasValidLoggerSession(rawSessionType) ? rawSessionType : computeTrackingType(configuration);\n    return {\n        trackingType: trackingType,\n        isTracked: trackingType === LoggerTrackingType.TRACKED,\n    };\n}\nfunction hasValidLoggerSession(trackingType) {\n    return trackingType === LoggerTrackingType.NOT_TRACKED || trackingType === LoggerTrackingType.TRACKED;\n}\n//# sourceMappingURL=loggerSession.js.map"]},"metadata":{},"sourceType":"module"}