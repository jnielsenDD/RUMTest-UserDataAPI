{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { BoundedBuffer, combine, createContextManager, defineGlobal, getGlobalObject, isPercentage, makePublicApi, monitor, display } from '@datadog/browser-core';\nimport { Logger } from '../domain/logger';\nimport { startLogs } from './startLogs';\nexport var datadogLogs = makeLogsPublicApi(startLogs);\ndefineGlobal(getGlobalObject(), 'DD_LOGS', datadogLogs);\nexport function makeLogsPublicApi(startLogsImpl) {\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var customLoggers = {};\n  var beforeInitSendLog = new BoundedBuffer();\n\n  var _sendLogStrategy = function sendLogStrategy(message, currentContext) {\n    beforeInitSendLog.add(function () {\n      return _sendLogStrategy(message, currentContext);\n    });\n  };\n\n  var logger = new Logger(sendLog);\n  return makePublicApi({\n    logger: logger,\n    init: monitor(function (userConfiguration) {\n      if (!canInitLogs(userConfiguration)) {\n        return;\n      }\n\n      if (userConfiguration.publicApiKey) {\n        userConfiguration.clientToken = userConfiguration.publicApiKey;\n        display.warn('Public API Key is deprecated. Please use Client Token instead.');\n      }\n\n      _sendLogStrategy = startLogsImpl(userConfiguration, logger, globalContextManager.get);\n      beforeInitSendLog.drain();\n      isAlreadyInitialized = true;\n    }),\n    getLoggerGlobalContext: monitor(globalContextManager.get),\n    setLoggerGlobalContext: monitor(globalContextManager.set),\n    addLoggerGlobalContext: monitor(globalContextManager.add),\n    removeLoggerGlobalContext: monitor(globalContextManager.remove),\n    createLogger: monitor(function (name, conf) {\n      if (conf === void 0) {\n        conf = {};\n      }\n\n      customLoggers[name] = new Logger(sendLog, conf.handler, conf.level, __assign(__assign({}, conf.context), {\n        logger: {\n          name: name\n        }\n      }));\n      return customLoggers[name];\n    }),\n    getLogger: monitor(function (name) {\n      return customLoggers[name];\n    })\n  });\n\n  function canInitLogs(userConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!userConfiguration.silentMultipleInit) {\n        display.error('DD_LOGS is already initialized.');\n      }\n\n      return false;\n    }\n\n    if (!userConfiguration || !userConfiguration.publicApiKey && !userConfiguration.clientToken) {\n      display.error('Client Token is not configured, we will not send any data.');\n      return false;\n    }\n\n    if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n      display.error('Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    return true;\n  }\n\n  function sendLog(message) {\n    _sendLogStrategy(message, combine({\n      date: Date.now(),\n      view: {\n        referrer: document.referrer,\n        url: window.location.href\n      }\n    }, globalContextManager.get()));\n  }\n}","map":{"version":3,"sources":["../../src/boot/logs.entry.ts"],"names":[],"mappings":";AAAA,SACE,aADF,EAEE,OAFF,EAIE,oBAJF,EAKE,YALF,EAME,eANF,EAOE,YAPF,EAQE,aARF,EASE,OATF,EAUE,OAVF,QAWO,uBAXP;AAYA,SAAsB,MAAtB,QAA6D,kBAA7D;AACA,SAAS,SAAT,QAAiD,aAAjD;AAUA,OAAO,IAAM,WAAW,GAAG,iBAAiB,CAAC,SAAD,CAArC;AAKP,YAAY,CAAC,eAAe,EAAhB,EAAmC,SAAnC,EAA8C,WAA9C,CAAZ;AAIA,OAAM,SAAU,iBAAV,CAA4B,aAA5B,EAAoD;AACxD,MAAI,oBAAoB,GAAG,KAA3B;AAEA,MAAM,oBAAoB,GAAG,oBAAoB,EAAjD;AACA,MAAM,aAAa,GAA2C,EAA9D;AAEA,MAAM,iBAAiB,GAAG,IAAI,aAAJ,EAA1B;;AACA,MAAI,gBAAe,GAAG,yBAAC,OAAD,EAAuB,cAAvB,EAA8C;AAClE,IAAA,iBAAiB,CAAC,GAAlB,CAAsB,YAAA;AAAM,aAAA,gBAAe,CAAC,OAAD,EAAf,cAAe,CAAf;AAAwC,KAApE;AACD,GAFD;;AAGA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAO,aAAa,CAAC;AACnB,IAAA,MAAM,EAAA,MADa;AAGnB,IAAA,IAAI,EAAE,OAAO,CAAC,UAAC,iBAAD,EAAyC;AACrD,UAAI,CAAC,WAAW,CAAC,iBAAD,CAAhB,EAAqC;AACnC;AACD;;AAED,UAAI,iBAAiB,CAAC,YAAtB,EAAoC;AAClC,QAAA,iBAAiB,CAAC,WAAlB,GAAgC,iBAAiB,CAAC,YAAlD;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,gEAAb;AACD;;AAED,MAAA,gBAAe,GAAG,aAAa,CAAC,iBAAD,EAAoB,MAApB,EAA4B,oBAAoB,CAAC,GAAjD,CAA/B;AACA,MAAA,iBAAiB,CAAC,KAAlB;AAEA,MAAA,oBAAoB,GAAG,IAAvB;AACD,KAdY,CAHM;AAmBnB,IAAA,sBAAsB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CAnBZ;AAoBnB,IAAA,sBAAsB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CApBZ;AAsBnB,IAAA,sBAAsB,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAtB,CAtBZ;AAwBnB,IAAA,yBAAyB,EAAE,OAAO,CAAC,oBAAoB,CAAC,MAAtB,CAxBf;AA0BnB,IAAA,YAAY,EAAE,OAAO,CAAC,UAAC,IAAD,EAAe,IAAf,EAA6C;AAA9B,UAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,IAAA,GAAA,EAAA;AAA8B;;AACjE,MAAA,aAAa,CAAC,IAAD,CAAb,GAAsB,IAAI,MAAJ,CAAW,OAAX,EAAoB,IAAI,CAAC,OAAzB,EAAkC,IAAI,CAAC,KAAvC,EAA4C,QAAA,CAAA,QAAA,CAAA,EAAA,EAC7D,IAAI,CAAC,OADwD,CAAA,EACjD;AACf,QAAA,MAAM,EAAE;AAAE,UAAA,IAAI,EAAA;AAAN;AADO,OADiD,CAA5C,CAAtB;AAIA,aAAO,aAAa,CAAC,IAAD,CAApB;AACD,KANoB,CA1BF;AAkCnB,IAAA,SAAS,EAAE,OAAO,CAAC,UAAC,IAAD,EAAa;AAAK,aAAA,aAAa,CAAb,IAAa,CAAb;AAAmB,KAAtC;AAlCC,GAAD,CAApB;;AAqCA,WAAS,WAAT,CAAqB,iBAArB,EAA6D;AAC3D,QAAI,oBAAJ,EAA0B;AACxB,UAAI,CAAC,iBAAiB,CAAC,kBAAvB,EAA2C;AACzC,QAAA,OAAO,CAAC,KAAR,CAAc,iCAAd;AACD;;AACD,aAAO,KAAP;AACD;;AACD,QAAI,CAAC,iBAAD,IAAuB,CAAC,iBAAiB,CAAC,YAAnB,IAAmC,CAAC,iBAAiB,CAAC,WAAjF,EAA+F;AAC7F,MAAA,OAAO,CAAC,KAAR,CAAc,4DAAd;AACA,aAAO,KAAP;AACD;;AACD,QAAI,iBAAiB,CAAC,UAAlB,KAAiC,SAAjC,IAA8C,CAAC,YAAY,CAAC,iBAAiB,CAAC,UAAnB,CAA/D,EAA+F;AAC7F,MAAA,OAAO,CAAC,KAAR,CAAc,kDAAd;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAED,WAAS,OAAT,CAAiB,OAAjB,EAAqC;AACnC,IAAA,gBAAe,CACb,OADa,EAEb,OAAO,CACL;AACE,MAAA,IAAI,EAAE,IAAI,CAAC,GAAL,EADR;AAEE,MAAA,IAAI,EAAE;AACJ,QAAA,QAAQ,EAAE,QAAQ,CAAC,QADf;AAEJ,QAAA,GAAG,EAAE,MAAM,CAAC,QAAP,CAAgB;AAFjB;AAFR,KADK,EAQL,oBAAoB,CAAC,GAArB,EARK,CAFM,CAAf;AAaD;AACF","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { BoundedBuffer, combine, createContextManager, defineGlobal, getGlobalObject, isPercentage, makePublicApi, monitor, display, } from '@datadog/browser-core';\nimport { Logger } from '../domain/logger';\nimport { startLogs } from './startLogs';\nexport var datadogLogs = makeLogsPublicApi(startLogs);\ndefineGlobal(getGlobalObject(), 'DD_LOGS', datadogLogs);\nexport function makeLogsPublicApi(startLogsImpl) {\n    var isAlreadyInitialized = false;\n    var globalContextManager = createContextManager();\n    var customLoggers = {};\n    var beforeInitSendLog = new BoundedBuffer();\n    var sendLogStrategy = function (message, currentContext) {\n        beforeInitSendLog.add(function () { return sendLogStrategy(message, currentContext); });\n    };\n    var logger = new Logger(sendLog);\n    return makePublicApi({\n        logger: logger,\n        init: monitor(function (userConfiguration) {\n            if (!canInitLogs(userConfiguration)) {\n                return;\n            }\n            if (userConfiguration.publicApiKey) {\n                userConfiguration.clientToken = userConfiguration.publicApiKey;\n                display.warn('Public API Key is deprecated. Please use Client Token instead.');\n            }\n            sendLogStrategy = startLogsImpl(userConfiguration, logger, globalContextManager.get);\n            beforeInitSendLog.drain();\n            isAlreadyInitialized = true;\n        }),\n        getLoggerGlobalContext: monitor(globalContextManager.get),\n        setLoggerGlobalContext: monitor(globalContextManager.set),\n        addLoggerGlobalContext: monitor(globalContextManager.add),\n        removeLoggerGlobalContext: monitor(globalContextManager.remove),\n        createLogger: monitor(function (name, conf) {\n            if (conf === void 0) { conf = {}; }\n            customLoggers[name] = new Logger(sendLog, conf.handler, conf.level, __assign(__assign({}, conf.context), { logger: { name: name } }));\n            return customLoggers[name];\n        }),\n        getLogger: monitor(function (name) { return customLoggers[name]; }),\n    });\n    function canInitLogs(userConfiguration) {\n        if (isAlreadyInitialized) {\n            if (!userConfiguration.silentMultipleInit) {\n                display.error('DD_LOGS is already initialized.');\n            }\n            return false;\n        }\n        if (!userConfiguration || (!userConfiguration.publicApiKey && !userConfiguration.clientToken)) {\n            display.error('Client Token is not configured, we will not send any data.');\n            return false;\n        }\n        if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n            display.error('Sample Rate should be a number between 0 and 100');\n            return false;\n        }\n        return true;\n    }\n    function sendLog(message) {\n        sendLogStrategy(message, combine({\n            date: Date.now(),\n            view: {\n                referrer: document.referrer,\n                url: window.location.href,\n            },\n        }, globalContextManager.get()));\n    }\n}\n//# sourceMappingURL=logs.entry.js.map"]},"metadata":{},"sourceType":"module"}