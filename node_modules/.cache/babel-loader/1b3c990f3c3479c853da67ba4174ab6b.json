{"ast":null,"code":"import { ErrorSource } from './error';\nimport { clocksNow } from './timeUtils';\nimport { ONE_MINUTE } from './utils';\nexport function createErrorFilter(configuration, onLimitReached) {\n  var errorCount = 0;\n  var allowNextError = false;\n  return {\n    isLimitReached: function isLimitReached() {\n      if (errorCount === 0) {\n        setTimeout(function () {\n          errorCount = 0;\n        }, ONE_MINUTE);\n      }\n\n      errorCount += 1;\n\n      if (errorCount <= configuration.maxErrorsByMinute || allowNextError) {\n        allowNextError = false;\n        return false;\n      }\n\n      if (errorCount === configuration.maxErrorsByMinute + 1) {\n        allowNextError = true;\n\n        try {\n          onLimitReached({\n            message: \"Reached max number of errors by minute: \" + configuration.maxErrorsByMinute,\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow()\n          });\n        } finally {\n          allowNextError = false;\n        }\n      }\n\n      return true;\n    }\n  };\n}","map":{"version":3,"sources":["../../src/tools/errorFilter.ts"],"names":[],"mappings":"AACA,SAAS,WAAT,QAAsC,SAAtC;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,UAAT,QAA2B,SAA3B;AAIA,OAAM,SAAU,iBAAV,CAA4B,aAA5B,EAA0D,cAA1D,EAAwG;AAC5G,MAAI,UAAU,GAAG,CAAjB;AACA,MAAI,cAAc,GAAG,KAArB;AAEA,SAAO;AACL,IAAA,cAAc,EAAA,0BAAA;AACZ,UAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,QAAA,UAAU,CAAC,YAAA;AACT,UAAA,UAAU,GAAG,CAAb;AACD,SAFS,EAEP,UAFO,CAAV;AAGD;;AAED,MAAA,UAAU,IAAI,CAAd;;AACA,UAAI,UAAU,IAAI,aAAa,CAAC,iBAA5B,IAAiD,cAArD,EAAqE;AACnE,QAAA,cAAc,GAAG,KAAjB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,UAAU,KAAK,aAAa,CAAC,iBAAd,GAAkC,CAArD,EAAwD;AACtD,QAAA,cAAc,GAAG,IAAjB;;AACA,YAAI;AACF,UAAA,cAAc,CAAC;AACb,YAAA,OAAO,EAAE,6CAA2C,aAAa,CAAC,iBADrD;AAEb,YAAA,MAAM,EAAE,WAAW,CAAC,KAFP;AAGb,YAAA,WAAW,EAAE,SAAS;AAHT,WAAD,CAAd;AAKD,SAND,SAMU;AACR,UAAA,cAAc,GAAG,KAAjB;AACD;AACF;;AAED,aAAO,IAAP;AACD;AA5BI,GAAP;AA8BD","sourceRoot":"","sourcesContent":["import { ErrorSource } from './error';\nimport { clocksNow } from './timeUtils';\nimport { ONE_MINUTE } from './utils';\nexport function createErrorFilter(configuration, onLimitReached) {\n    var errorCount = 0;\n    var allowNextError = false;\n    return {\n        isLimitReached: function () {\n            if (errorCount === 0) {\n                setTimeout(function () {\n                    errorCount = 0;\n                }, ONE_MINUTE);\n            }\n            errorCount += 1;\n            if (errorCount <= configuration.maxErrorsByMinute || allowNextError) {\n                allowNextError = false;\n                return false;\n            }\n            if (errorCount === configuration.maxErrorsByMinute + 1) {\n                allowNextError = true;\n                try {\n                    onLimitReached({\n                        message: \"Reached max number of errors by minute: \" + configuration.maxErrorsByMinute,\n                        source: ErrorSource.AGENT,\n                        startClocks: clocksNow(),\n                    });\n                }\n                finally {\n                    allowNextError = false;\n                }\n            }\n            return true;\n        },\n    };\n}\n//# sourceMappingURL=errorFilter.js.map"]},"metadata":{},"sourceType":"module"}