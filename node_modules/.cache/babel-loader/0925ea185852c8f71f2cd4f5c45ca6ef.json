{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { combine, createErrorFilter, isEmptyObject, limitModification, timeStampNow, currentDrift, display, addMonitoringMessage, relativeNow } from '@datadog/browser-core';\nimport { RumEventType } from '../rawRumEvent.types';\nimport { LifeCycleEventType } from './lifeCycle';\nvar SessionType;\n\n(function (SessionType) {\n  SessionType[\"SYNTHETICS\"] = \"synthetics\";\n  SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\n\nvar VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [// Fields with sensitive data\n'view.url', 'view.referrer', 'action.target.name', 'error.message', 'error.stack', 'error.resource.url', 'resource.url'];\n\nvar OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = __spreadArrays(VIEW_EVENTS_MODIFIABLE_FIELD_PATHS, [// User-customizable field\n'context']);\n\nexport function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getCommonContext) {\n  var errorFilter = createErrorFilter(configuration, function (error) {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, {\n      error: error\n    });\n  });\n  lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {\n    var startTime = _a.startTime,\n        rawRumEvent = _a.rawRumEvent,\n        domainContext = _a.domainContext,\n        savedCommonContext = _a.savedCommonContext,\n        customerContext = _a.customerContext;\n    var viewContext = parentContexts.findView(startTime);\n\n    if (session.isTracked() && viewContext && viewContext.session.id === session.getId()) {\n      var actionContext = parentContexts.findAction(startTime);\n      var commonContext = savedCommonContext || getCommonContext();\n      var rumContext = {\n        _dd: {\n          format_version: 2,\n          drift: currentDrift()\n        },\n        application: {\n          id: applicationId\n        },\n        date: timeStampNow(),\n        service: configuration.service,\n        session: {\n          // must be computed on each event because synthetics instrumentation can be done after sdk execution\n          // cf https://github.com/puppeteer/puppeteer/issues/3667\n          type: getSessionType()\n        }\n      };\n      var serverRumEvent = needToAssembleWithAction(rawRumEvent) ? combine(rumContext, viewContext, actionContext, rawRumEvent) : combine(rumContext, viewContext, rawRumEvent);\n      serverRumEvent.context = combine(commonContext.context, customerContext);\n\n      if (!('has_replay' in serverRumEvent.session)) {\n        ;\n        serverRumEvent.session.has_replay = commonContext.hasReplay;\n      }\n\n      if (!isEmptyObject(commonContext.user)) {\n        ;\n        serverRumEvent.usr = commonContext.user;\n      }\n\n      if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, errorFilter)) {\n        if (isEmptyObject(serverRumEvent.context)) {\n          delete serverRumEvent.context;\n        }\n\n        if (typeof serverRumEvent.date !== 'number') {\n          addMonitoringMessage('invalid date', {\n            debug: {\n              eventType: serverRumEvent.type,\n              eventTimeStamp: serverRumEvent.date,\n              eventRelativeTime: Math.round(startTime),\n              timeStampNow: timeStampNow(),\n              relativeNow: Math.round(relativeNow()),\n              drift: currentDrift()\n            }\n          });\n        }\n\n        lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);\n      }\n    }\n  });\n}\n\nfunction shouldSend(event, beforeSend, domainContext, errorFilter) {\n  if (beforeSend) {\n    var result = limitModification(event, event.type === RumEventType.VIEW ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS, function (event) {\n      return beforeSend(event, domainContext);\n    });\n\n    if (result === false && event.type !== RumEventType.VIEW) {\n      return false;\n    }\n\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\");\n    }\n  }\n\n  if (event.type === RumEventType.ERROR) {\n    return !errorFilter.isLimitReached();\n  }\n\n  return true;\n}\n\nfunction needToAssembleWithAction(event) {\n  return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1;\n}\n\nfunction getSessionType() {\n  return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;\n}","map":{"version":3,"sources":["../../src/domain/assembly.ts"],"names":[],"mappings":";AAAA,SACE,OADF,EAIE,iBAJF,EAME,aANF,EAOE,iBAPF,EAQE,YARF,EASE,YATF,EAUE,OAVF,EAWE,oBAXF,EAYE,WAZF,QAcO,uBAdP;AAeA,SAQE,YARF,QAUO,sBAVP;AAYA,SAAoB,kBAApB,QAA8C,aAA9C;AAQA,IAAK,WAAL;;AAAA,CAAA,UAAK,WAAL,EAAgB;AACd,EAAA,WAAA,CAAA,YAAA,CAAA,GAAA,YAAA;AACA,EAAA,WAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CAHD,EAAK,WAAW,KAAX,WAAW,GAAA,EAAA,CAAhB;;AAKA,IAAM,kCAAkC,GAAG,CACzC;AACA,UAFyC,EAGzC,eAHyC,EAIzC,oBAJyC,EAKzC,eALyC,EAMzC,aANyC,EAOzC,oBAPyC,EAQzC,cARyC,CAA3C;;AAWA,IAAM,mCAAmC,GAAA,cAAA,CACpC,kCADoC,EACF,CACrC;AACA,SAFqC,CADE,CAAzC;;AAQA,OAAM,SAAU,gBAAV,CACJ,aADI,EAEJ,aAFI,EAGJ,SAHI,EAIJ,OAJI,EAKJ,cALI,EAMJ,gBANI,EAMiC;AAErC,MAAM,WAAW,GAAG,iBAAiB,CAAC,aAAD,EAAgB,UAAC,KAAD,EAAM;AACzD,IAAA,SAAS,CAAC,MAAV,CAAiB,kBAAkB,CAAC,mBAApC,EAAyD;AAAE,MAAA,KAAK,EAAA;AAAP,KAAzD;AACD,GAFoC,CAArC;AAIA,EAAA,SAAS,CAAC,SAAV,CACE,kBAAkB,CAAC,uBADrB,EAEE,UAAC,EAAD,EAA+E;QAA5E,SAAS,GAAA,EAAA,CAAA,S;QAAE,WAAW,GAAA,EAAA,CAAA,W;QAAE,aAAa,GAAA,EAAA,CAAA,a;QAAE,kBAAkB,GAAA,EAAA,CAAA,kB;QAAE,eAAe,GAAA,EAAA,CAAA,e;AAC3E,QAAM,WAAW,GAAG,cAAc,CAAC,QAAf,CAAwB,SAAxB,CAApB;;AACA,QAAI,OAAO,CAAC,SAAR,MAAuB,WAAvB,IAAsC,WAAW,CAAC,OAAZ,CAAoB,EAApB,KAA2B,OAAO,CAAC,KAAR,EAArE,EAAsF;AACpF,UAAM,aAAa,GAAG,cAAc,CAAC,UAAf,CAA0B,SAA1B,CAAtB;AACA,UAAM,aAAa,GAAG,kBAAkB,IAAI,gBAAgB,EAA5D;AACA,UAAM,UAAU,GAAe;AAC7B,QAAA,GAAG,EAAE;AACH,UAAA,cAAc,EAAE,CADb;AAEH,UAAA,KAAK,EAAE,YAAY;AAFhB,SADwB;AAK7B,QAAA,WAAW,EAAE;AACX,UAAA,EAAE,EAAE;AADO,SALgB;AAQ7B,QAAA,IAAI,EAAE,YAAY,EARW;AAS7B,QAAA,OAAO,EAAE,aAAa,CAAC,OATM;AAU7B,QAAA,OAAO,EAAE;AACP;AACA;AACA,UAAA,IAAI,EAAE,cAAc;AAHb;AAVoB,OAA/B;AAgBA,UAAM,cAAc,GAAI,wBAAwB,CAAC,WAAD,CAAxB,GACpB,OAAO,CAAC,UAAD,EAAa,WAAb,EAA0B,aAA1B,EAAyC,WAAzC,CADa,GAEpB,OAAO,CAAC,UAAD,EAAa,WAAb,EAA0B,WAA1B,CAFX;AAIA,MAAA,cAAc,CAAC,OAAf,GAAyB,OAAO,CAAC,aAAa,CAAC,OAAf,EAAwB,eAAxB,CAAhC;;AAEA,UAAI,EAAE,gBAAgB,cAAc,CAAC,OAAjC,CAAJ,EAA+C;AAC7C;AAAE,QAAA,cAAc,CAAC,OAAf,CAAwD,UAAxD,GAAqE,aAAa,CAAC,SAAnF;AACH;;AAED,UAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAf,CAAlB,EAAwC;AACtC;AAAE,QAAA,cAAc,CAAC,GAAf,GAAkD,aAAa,CAAC,IAAhE;AACH;;AACD,UAAI,UAAU,CAAC,cAAD,EAAiB,aAAa,CAAC,UAA/B,EAA2C,aAA3C,EAA0D,WAA1D,CAAd,EAAsF;AACpF,YAAI,aAAa,CAAC,cAAc,CAAC,OAAhB,CAAjB,EAA2C;AACzC,iBAAO,cAAc,CAAC,OAAtB;AACD;;AACD,YAAI,OAAO,cAAc,CAAC,IAAtB,KAA+B,QAAnC,EAA6C;AAC3C,UAAA,oBAAoB,CAAC,cAAD,EAAiB;AACnC,YAAA,KAAK,EAAE;AACL,cAAA,SAAS,EAAE,cAAc,CAAC,IADrB;AAEL,cAAA,cAAc,EAAE,cAAc,CAAC,IAF1B;AAGL,cAAA,iBAAiB,EAAE,IAAI,CAAC,KAAL,CAAW,SAAX,CAHd;AAIL,cAAA,YAAY,EAAE,YAAY,EAJrB;AAKL,cAAA,WAAW,EAAE,IAAI,CAAC,KAAL,CAAW,WAAW,EAAtB,CALR;AAML,cAAA,KAAK,EAAE,YAAY;AANd;AAD4B,WAAjB,CAApB;AAUD;;AACD,QAAA,SAAS,CAAC,MAAV,CAAiB,kBAAkB,CAAC,mBAApC,EAAyD,cAAzD;AACD;AACF;AACF,GAvDH;AAyDD;;AAED,SAAS,UAAT,CACE,KADF,EAEE,UAFF,EAGE,aAHF,EAIE,WAJF,EAI0B;AAExB,MAAI,UAAJ,EAAgB;AACd,QAAM,MAAM,GAAG,iBAAiB,CAC9B,KAD8B,EAE9B,KAAK,CAAC,IAAN,KAAe,YAAY,CAAC,IAA5B,GAAmC,kCAAnC,GAAwE,mCAF1C,EAG9B,UAAC,KAAD,EAAM;AAAK,aAAA,UAAU,CAAC,KAAD,EAAV,aAAU,CAAV;AAAgC,KAHb,CAAhC;;AAKA,QAAI,MAAM,KAAK,KAAX,IAAoB,KAAK,CAAC,IAAN,KAAe,YAAY,CAAC,IAApD,EAA0D;AACxD,aAAO,KAAP;AACD;;AACD,QAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,MAAA,OAAO,CAAC,IAAR,CAAa,6CAAb;AACD;AACF;;AACD,MAAI,KAAK,CAAC,IAAN,KAAe,YAAY,CAAC,KAAhC,EAAuC;AACrC,WAAO,CAAC,WAAW,CAAC,cAAZ,EAAR;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,wBAAT,CACE,KADF,EACoB;AAElB,SAAO,CAAC,YAAY,CAAC,KAAd,EAAqB,YAAY,CAAC,QAAlC,EAA4C,YAAY,CAAC,SAAzD,EAAoE,OAApE,CAA4E,KAAK,CAAC,IAAlF,MAA4F,CAAC,CAApG;AACD;;AAED,SAAS,cAAT,GAAuB;AACrB,SAAQ,MAAwB,CAAC,2BAAzB,KAAyD,SAAzD,GAAqE,WAAW,CAAC,IAAjF,GAAwF,WAAW,CAAC,UAA5G;AACD","sourceRoot":"","sourcesContent":["import { __spreadArrays } from \"tslib\";\nimport { combine, createErrorFilter, isEmptyObject, limitModification, timeStampNow, currentDrift, display, addMonitoringMessage, relativeNow, } from '@datadog/browser-core';\nimport { RumEventType, } from '../rawRumEvent.types';\nimport { LifeCycleEventType } from './lifeCycle';\nvar SessionType;\n(function (SessionType) {\n    SessionType[\"SYNTHETICS\"] = \"synthetics\";\n    SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\nvar VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [\n    // Fields with sensitive data\n    'view.url',\n    'view.referrer',\n    'action.target.name',\n    'error.message',\n    'error.stack',\n    'error.resource.url',\n    'resource.url',\n];\nvar OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = __spreadArrays(VIEW_EVENTS_MODIFIABLE_FIELD_PATHS, [\n    // User-customizable field\n    'context',\n]);\nexport function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getCommonContext) {\n    var errorFilter = createErrorFilter(configuration, function (error) {\n        lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error: error });\n    });\n    lifeCycle.subscribe(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {\n        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, domainContext = _a.domainContext, savedCommonContext = _a.savedCommonContext, customerContext = _a.customerContext;\n        var viewContext = parentContexts.findView(startTime);\n        if (session.isTracked() && viewContext && viewContext.session.id === session.getId()) {\n            var actionContext = parentContexts.findAction(startTime);\n            var commonContext = savedCommonContext || getCommonContext();\n            var rumContext = {\n                _dd: {\n                    format_version: 2,\n                    drift: currentDrift(),\n                },\n                application: {\n                    id: applicationId,\n                },\n                date: timeStampNow(),\n                service: configuration.service,\n                session: {\n                    // must be computed on each event because synthetics instrumentation can be done after sdk execution\n                    // cf https://github.com/puppeteer/puppeteer/issues/3667\n                    type: getSessionType(),\n                },\n            };\n            var serverRumEvent = (needToAssembleWithAction(rawRumEvent)\n                ? combine(rumContext, viewContext, actionContext, rawRumEvent)\n                : combine(rumContext, viewContext, rawRumEvent));\n            serverRumEvent.context = combine(commonContext.context, customerContext);\n            if (!('has_replay' in serverRumEvent.session)) {\n                ;\n                serverRumEvent.session.has_replay = commonContext.hasReplay;\n            }\n            if (!isEmptyObject(commonContext.user)) {\n                ;\n                serverRumEvent.usr = commonContext.user;\n            }\n            if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, errorFilter)) {\n                if (isEmptyObject(serverRumEvent.context)) {\n                    delete serverRumEvent.context;\n                }\n                if (typeof serverRumEvent.date !== 'number') {\n                    addMonitoringMessage('invalid date', {\n                        debug: {\n                            eventType: serverRumEvent.type,\n                            eventTimeStamp: serverRumEvent.date,\n                            eventRelativeTime: Math.round(startTime),\n                            timeStampNow: timeStampNow(),\n                            relativeNow: Math.round(relativeNow()),\n                            drift: currentDrift(),\n                        },\n                    });\n                }\n                lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);\n            }\n        }\n    });\n}\nfunction shouldSend(event, beforeSend, domainContext, errorFilter) {\n    if (beforeSend) {\n        var result = limitModification(event, event.type === RumEventType.VIEW ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS, function (event) { return beforeSend(event, domainContext); });\n        if (result === false && event.type !== RumEventType.VIEW) {\n            return false;\n        }\n        if (result === false) {\n            display.warn(\"Can't dismiss view events using beforeSend!\");\n        }\n    }\n    if (event.type === RumEventType.ERROR) {\n        return !errorFilter.isLimitReached();\n    }\n    return true;\n}\nfunction needToAssembleWithAction(event) {\n    return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1;\n}\nfunction getSessionType() {\n    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;\n}\n//# sourceMappingURL=assembly.js.map"]},"metadata":{},"sourceType":"module"}