{"ast":null,"code":"import { monitor, ONE_MINUTE, SESSION_TIME_OUT_DELAY, relativeNow } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nexport var VIEW_CONTEXT_TIME_OUT_DELAY = SESSION_TIME_OUT_DELAY;\nexport var ACTION_CONTEXT_TIME_OUT_DELAY = 5 * ONE_MINUTE; // arbitrary\n\nexport var CLEAR_OLD_CONTEXTS_INTERVAL = ONE_MINUTE;\nexport function startParentContexts(lifeCycle, session) {\n  var currentView;\n  var currentAction;\n  var currentSessionId;\n  var previousViews = [];\n  var previousActions = [];\n  lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, function (currentContext) {\n    currentView = currentContext;\n    currentSessionId = session.getId();\n  });\n  lifeCycle.subscribe(LifeCycleEventType.VIEW_UPDATED, function (currentContext) {\n    // A view can be updated after its end.  We have to ensure that the view being updated is the\n    // most recently created.\n    if (currentView && currentView.id === currentContext.id) {\n      currentView = currentContext;\n    }\n  });\n  lifeCycle.subscribe(LifeCycleEventType.VIEW_ENDED, function (_a) {\n    var endClocks = _a.endClocks;\n\n    if (currentView) {\n      previousViews.unshift({\n        endTime: endClocks.relative,\n        context: buildCurrentViewContext(),\n        startTime: currentView.startClocks.relative\n      });\n      currentView = undefined;\n    }\n  });\n  lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_CREATED, function (currentContext) {\n    currentAction = currentContext;\n  });\n  lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_COMPLETED, function (action) {\n    if (currentAction) {\n      previousActions.unshift({\n        context: buildCurrentActionContext(),\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        endTime: currentAction.startClocks.relative + action.duration,\n        startTime: currentAction.startClocks.relative\n      });\n    }\n\n    currentAction = undefined;\n  });\n  lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_DISCARDED, function () {\n    currentAction = undefined;\n  });\n  lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n    previousViews = [];\n    previousActions = [];\n    currentView = undefined;\n    currentAction = undefined;\n  });\n  var clearOldContextsInterval = setInterval(monitor(function () {\n    clearOldContexts(previousViews, VIEW_CONTEXT_TIME_OUT_DELAY);\n    clearOldContexts(previousActions, ACTION_CONTEXT_TIME_OUT_DELAY);\n  }), CLEAR_OLD_CONTEXTS_INTERVAL);\n\n  function clearOldContexts(previousContexts, timeOutDelay) {\n    var oldTimeThreshold = relativeNow() - timeOutDelay;\n\n    while (previousContexts.length > 0 && previousContexts[previousContexts.length - 1].startTime < oldTimeThreshold) {\n      previousContexts.pop();\n    }\n  }\n\n  function buildCurrentViewContext() {\n    return {\n      session: {\n        id: currentSessionId\n      },\n      view: {\n        id: currentView.id,\n        name: currentView.name,\n        referrer: currentView.referrer,\n        url: currentView.location.href\n      }\n    };\n  }\n\n  function buildCurrentActionContext() {\n    return {\n      action: {\n        id: currentAction.id\n      }\n    };\n  }\n\n  function findContext(buildContext, previousContexts, currentContext, startTime) {\n    if (startTime === undefined) {\n      return currentContext ? buildContext() : undefined;\n    }\n\n    if (currentContext && startTime >= currentContext.startClocks.relative) {\n      return buildContext();\n    }\n\n    for (var _i = 0, previousContexts_1 = previousContexts; _i < previousContexts_1.length; _i++) {\n      var previousContext = previousContexts_1[_i];\n\n      if (startTime > previousContext.endTime) {\n        break;\n      }\n\n      if (startTime >= previousContext.startTime) {\n        return previousContext.context;\n      }\n    }\n\n    return undefined;\n  }\n\n  return {\n    findAction: function findAction(startTime) {\n      return findContext(buildCurrentActionContext, previousActions, currentAction, startTime);\n    },\n    findView: function findView(startTime) {\n      return findContext(buildCurrentViewContext, previousViews, currentView, startTime);\n    },\n    stop: function stop() {\n      clearInterval(clearOldContextsInterval);\n    }\n  };\n}","map":{"version":3,"sources":["../../src/domain/parentContexts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { monitor, ONE_MINUTE, SESSION_TIME_OUT_DELAY, relativeNow, } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nexport var VIEW_CONTEXT_TIME_OUT_DELAY = SESSION_TIME_OUT_DELAY;\nexport var ACTION_CONTEXT_TIME_OUT_DELAY = 5 * ONE_MINUTE; // arbitrary\nexport var CLEAR_OLD_CONTEXTS_INTERVAL = ONE_MINUTE;\nexport function startParentContexts(lifeCycle, session) {\n    var currentView;\n    var currentAction;\n    var currentSessionId;\n    var previousViews = [];\n    var previousActions = [];\n    lifeCycle.subscribe(LifeCycleEventType.VIEW_CREATED, function (currentContext) {\n        currentView = currentContext;\n        currentSessionId = session.getId();\n    });\n    lifeCycle.subscribe(LifeCycleEventType.VIEW_UPDATED, function (currentContext) {\n        // A view can be updated after its end.  We have to ensure that the view being updated is the\n        // most recently created.\n        if (currentView && currentView.id === currentContext.id) {\n            currentView = currentContext;\n        }\n    });\n    lifeCycle.subscribe(LifeCycleEventType.VIEW_ENDED, function (_a) {\n        var endClocks = _a.endClocks;\n        if (currentView) {\n            previousViews.unshift({\n                endTime: endClocks.relative,\n                context: buildCurrentViewContext(),\n                startTime: currentView.startClocks.relative,\n            });\n            currentView = undefined;\n        }\n    });\n    lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_CREATED, function (currentContext) {\n        currentAction = currentContext;\n    });\n    lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_COMPLETED, function (action) {\n        if (currentAction) {\n            previousActions.unshift({\n                context: buildCurrentActionContext(),\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                endTime: (currentAction.startClocks.relative + action.duration),\n                startTime: currentAction.startClocks.relative,\n            });\n        }\n        currentAction = undefined;\n    });\n    lifeCycle.subscribe(LifeCycleEventType.AUTO_ACTION_DISCARDED, function () {\n        currentAction = undefined;\n    });\n    lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n        previousViews = [];\n        previousActions = [];\n        currentView = undefined;\n        currentAction = undefined;\n    });\n    var clearOldContextsInterval = setInterval(monitor(function () {\n        clearOldContexts(previousViews, VIEW_CONTEXT_TIME_OUT_DELAY);\n        clearOldContexts(previousActions, ACTION_CONTEXT_TIME_OUT_DELAY);\n    }), CLEAR_OLD_CONTEXTS_INTERVAL);\n    function clearOldContexts(previousContexts, timeOutDelay) {\n        var oldTimeThreshold = relativeNow() - timeOutDelay;\n        while (previousContexts.length > 0 && previousContexts[previousContexts.length - 1].startTime < oldTimeThreshold) {\n            previousContexts.pop();\n        }\n    }\n    function buildCurrentViewContext() {\n        return {\n            session: {\n                id: currentSessionId,\n            },\n            view: {\n                id: currentView.id,\n                name: currentView.name,\n                referrer: currentView.referrer,\n                url: currentView.location.href,\n            },\n        };\n    }\n    function buildCurrentActionContext() {\n        return { action: { id: currentAction.id } };\n    }\n    function findContext(buildContext, previousContexts, currentContext, startTime) {\n        if (startTime === undefined) {\n            return currentContext ? buildContext() : undefined;\n        }\n        if (currentContext && startTime >= currentContext.startClocks.relative) {\n            return buildContext();\n        }\n        for (var _i = 0, previousContexts_1 = previousContexts; _i < previousContexts_1.length; _i++) {\n            var previousContext = previousContexts_1[_i];\n            if (startTime > previousContext.endTime) {\n                break;\n            }\n            if (startTime >= previousContext.startTime) {\n                return previousContext.context;\n            }\n        }\n        return undefined;\n    }\n    return {\n        findAction: function (startTime) { return findContext(buildCurrentActionContext, previousActions, currentAction, startTime); },\n        findView: function (startTime) { return findContext(buildCurrentViewContext, previousViews, currentView, startTime); },\n        stop: function () {\n            clearInterval(clearOldContextsInterval);\n        },\n    };\n}\n//# sourceMappingURL=parentContexts.js.map"]},"metadata":{},"sourceType":"module"}