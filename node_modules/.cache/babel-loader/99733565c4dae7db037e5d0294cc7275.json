{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { elapsed, generateUUID, monitor, ONE_MINUTE, throttle, clocksNow, clocksOrigin, timeStampNow, display } from '@datadog/browser-core';\nimport { ViewLoadingType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackInitialViewTimings } from './trackInitialViewTimings';\nimport { trackLocationChanges, areDifferentLocation } from './trackLocationChanges';\nimport { trackViewMetrics } from './trackViewMetrics';\nexport var THROTTLE_VIEW_UPDATE_PERIOD = 3000;\nexport var SESSION_KEEP_ALIVE_INTERVAL = 5 * ONE_MINUTE;\nexport function trackViews(location, lifeCycle, domMutationObservable, areViewsTrackedAutomatically, initialViewName) {\n  var isRecording = false;\n\n  var _a = trackInitialView(initialViewName),\n      stopInitialViewTracking = _a.stop,\n      initialView = _a.initialView;\n\n  var currentView = initialView;\n  var stopViewLifeCycle = startViewLifeCycle().stop;\n  var stopViewCollectionMode = (areViewsTrackedAutomatically ? startAutomaticViewCollection() : startManualViewCollection()).stop;\n\n  function trackInitialView(name) {\n    var initialView = newView(lifeCycle, domMutationObservable, location, isRecording, ViewLoadingType.INITIAL_LOAD, document.referrer, clocksOrigin(), name);\n    var stop = trackInitialViewTimings(lifeCycle, function (timings) {\n      initialView.updateTimings(timings);\n      initialView.scheduleUpdate();\n    }).stop;\n    return {\n      initialView: initialView,\n      stop: stop\n    };\n  }\n\n  function trackViewChange(startClocks, name) {\n    return newView(lifeCycle, domMutationObservable, location, isRecording, ViewLoadingType.ROUTE_CHANGE, currentView.url, startClocks, name);\n  }\n\n  function startViewLifeCycle() {\n    lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n      // do not trigger view update to avoid wrong data\n      currentView.end(); // Renew view on session renewal\n\n      currentView = trackViewChange(undefined, currentView.name);\n    }); // End the current view on page unload\n\n    lifeCycle.subscribe(LifeCycleEventType.BEFORE_UNLOAD, function () {\n      currentView.end();\n      currentView.triggerUpdate();\n    });\n    lifeCycle.subscribe(LifeCycleEventType.RECORD_STARTED, function () {\n      isRecording = true;\n      currentView.updateHasReplay(true);\n    });\n    lifeCycle.subscribe(LifeCycleEventType.RECORD_STOPPED, function () {\n      isRecording = false;\n    }); // Session keep alive\n\n    var keepAliveInterval = window.setInterval(monitor(function () {\n      currentView.triggerUpdate();\n    }), SESSION_KEEP_ALIVE_INTERVAL);\n    return {\n      stop: function stop() {\n        clearInterval(keepAliveInterval);\n      }\n    };\n  }\n\n  function startAutomaticViewCollection() {\n    return trackLocationChanges(function () {\n      if (areDifferentLocation(currentView.getLocation(), location)) {\n        // Renew view on location changes\n        currentView.end();\n        currentView.triggerUpdate();\n        currentView = trackViewChange();\n        return;\n      }\n\n      currentView.updateLocation(location);\n      currentView.triggerUpdate();\n    });\n  }\n\n  function startManualViewCollection() {\n    return trackLocationChanges(function () {\n      currentView.updateLocation(location);\n      currentView.triggerUpdate();\n    });\n  }\n\n  return {\n    addTiming: function addTiming(name, time) {\n      if (time === void 0) {\n        time = timeStampNow();\n      }\n\n      currentView.addTiming(name, time);\n      currentView.triggerUpdate();\n    },\n    startView: function startView(name, startClocks) {\n      currentView.end(startClocks);\n      currentView.triggerUpdate();\n      currentView = trackViewChange(startClocks, name);\n    },\n    stop: function stop() {\n      stopViewCollectionMode();\n      stopInitialViewTracking();\n      stopViewLifeCycle();\n      currentView.end();\n    }\n  };\n}\n\nfunction newView(lifeCycle, domMutationObservable, initialLocation, initialHasReplay, loadingType, referrer, startClocks, name) {\n  if (startClocks === void 0) {\n    startClocks = clocksNow();\n  } // Setup initial values\n\n\n  var id = generateUUID();\n  var timings = {};\n  var customTimings = {};\n  var documentVersion = 0;\n  var endClocks;\n\n  var location = __assign({}, initialLocation);\n\n  var hasReplay = initialHasReplay;\n  lifeCycle.notify(LifeCycleEventType.VIEW_CREATED, {\n    id: id,\n    name: name,\n    startClocks: startClocks,\n    location: location,\n    referrer: referrer\n  }); // Update the view every time the measures are changing\n\n  var _a = throttle(monitor(triggerViewUpdate), THROTTLE_VIEW_UPDATE_PERIOD, {\n    leading: false\n  }),\n      scheduleViewUpdate = _a.throttled,\n      cancelScheduleViewUpdate = _a.cancel;\n\n  var _b = trackViewMetrics(lifeCycle, domMutationObservable, scheduleViewUpdate, loadingType),\n      setLoadEvent = _b.setLoadEvent,\n      stopViewMetricsTracking = _b.stop,\n      viewMetrics = _b.viewMetrics; // Initial view update\n\n\n  triggerViewUpdate();\n\n  function triggerViewUpdate() {\n    documentVersion += 1;\n    var currentEnd = endClocks === undefined ? timeStampNow() : endClocks.timeStamp;\n    lifeCycle.notify(LifeCycleEventType.VIEW_UPDATED, __assign(__assign({}, viewMetrics), {\n      customTimings: customTimings,\n      documentVersion: documentVersion,\n      id: id,\n      name: name,\n      loadingType: loadingType,\n      location: location,\n      hasReplay: hasReplay,\n      referrer: referrer,\n      startClocks: startClocks,\n      timings: timings,\n      duration: elapsed(startClocks.timeStamp, currentEnd),\n      isActive: endClocks === undefined\n    }));\n  }\n\n  return {\n    name: name,\n    scheduleUpdate: scheduleViewUpdate,\n    end: function end(clocks) {\n      if (clocks === void 0) {\n        clocks = clocksNow();\n      }\n\n      endClocks = clocks;\n      stopViewMetricsTracking();\n      lifeCycle.notify(LifeCycleEventType.VIEW_ENDED, {\n        endClocks: endClocks\n      });\n    },\n    getLocation: function getLocation() {\n      return location;\n    },\n    triggerUpdate: function triggerUpdate() {\n      // cancel any pending view updates execution\n      cancelScheduleViewUpdate();\n      triggerViewUpdate();\n    },\n    updateTimings: function updateTimings(newTimings) {\n      timings = newTimings;\n\n      if (newTimings.loadEvent !== undefined) {\n        setLoadEvent(newTimings.loadEvent);\n      }\n    },\n    addTiming: function addTiming(name, time) {\n      customTimings[sanitizeTiming(name)] = elapsed(startClocks.timeStamp, time);\n    },\n    updateLocation: function updateLocation(newLocation) {\n      location = __assign({}, newLocation);\n    },\n    updateHasReplay: function updateHasReplay(newHasReplay) {\n      hasReplay = newHasReplay;\n    },\n\n    get url() {\n      return location.href;\n    }\n\n  };\n}\n/**\n * Timing name is used as facet path that must contain only letters, digits, or the characters - _ . @ $\n */\n\n\nfunction sanitizeTiming(name) {\n  var sanitized = name.replace(/[^a-zA-Z0-9-_.@$]/g, '_');\n\n  if (sanitized !== name) {\n    display.warn(\"Invalid timing name: \" + name + \", sanitized to: \" + sanitized);\n  }\n\n  return sanitized;\n}","map":{"version":3,"sources":["../../../../src/domain/rumEventsCollection/view/trackViews.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { elapsed, generateUUID, monitor, ONE_MINUTE, throttle, clocksNow, clocksOrigin, timeStampNow, display, } from '@datadog/browser-core';\nimport { ViewLoadingType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackInitialViewTimings } from './trackInitialViewTimings';\nimport { trackLocationChanges, areDifferentLocation } from './trackLocationChanges';\nimport { trackViewMetrics } from './trackViewMetrics';\nexport var THROTTLE_VIEW_UPDATE_PERIOD = 3000;\nexport var SESSION_KEEP_ALIVE_INTERVAL = 5 * ONE_MINUTE;\nexport function trackViews(location, lifeCycle, domMutationObservable, areViewsTrackedAutomatically, initialViewName) {\n    var isRecording = false;\n    var _a = trackInitialView(initialViewName), stopInitialViewTracking = _a.stop, initialView = _a.initialView;\n    var currentView = initialView;\n    var stopViewLifeCycle = startViewLifeCycle().stop;\n    var stopViewCollectionMode = (areViewsTrackedAutomatically\n        ? startAutomaticViewCollection()\n        : startManualViewCollection()).stop;\n    function trackInitialView(name) {\n        var initialView = newView(lifeCycle, domMutationObservable, location, isRecording, ViewLoadingType.INITIAL_LOAD, document.referrer, clocksOrigin(), name);\n        var stop = trackInitialViewTimings(lifeCycle, function (timings) {\n            initialView.updateTimings(timings);\n            initialView.scheduleUpdate();\n        }).stop;\n        return { initialView: initialView, stop: stop };\n    }\n    function trackViewChange(startClocks, name) {\n        return newView(lifeCycle, domMutationObservable, location, isRecording, ViewLoadingType.ROUTE_CHANGE, currentView.url, startClocks, name);\n    }\n    function startViewLifeCycle() {\n        lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n            // do not trigger view update to avoid wrong data\n            currentView.end();\n            // Renew view on session renewal\n            currentView = trackViewChange(undefined, currentView.name);\n        });\n        // End the current view on page unload\n        lifeCycle.subscribe(LifeCycleEventType.BEFORE_UNLOAD, function () {\n            currentView.end();\n            currentView.triggerUpdate();\n        });\n        lifeCycle.subscribe(LifeCycleEventType.RECORD_STARTED, function () {\n            isRecording = true;\n            currentView.updateHasReplay(true);\n        });\n        lifeCycle.subscribe(LifeCycleEventType.RECORD_STOPPED, function () {\n            isRecording = false;\n        });\n        // Session keep alive\n        var keepAliveInterval = window.setInterval(monitor(function () {\n            currentView.triggerUpdate();\n        }), SESSION_KEEP_ALIVE_INTERVAL);\n        return {\n            stop: function () {\n                clearInterval(keepAliveInterval);\n            },\n        };\n    }\n    function startAutomaticViewCollection() {\n        return trackLocationChanges(function () {\n            if (areDifferentLocation(currentView.getLocation(), location)) {\n                // Renew view on location changes\n                currentView.end();\n                currentView.triggerUpdate();\n                currentView = trackViewChange();\n                return;\n            }\n            currentView.updateLocation(location);\n            currentView.triggerUpdate();\n        });\n    }\n    function startManualViewCollection() {\n        return trackLocationChanges(function () {\n            currentView.updateLocation(location);\n            currentView.triggerUpdate();\n        });\n    }\n    return {\n        addTiming: function (name, time) {\n            if (time === void 0) { time = timeStampNow(); }\n            currentView.addTiming(name, time);\n            currentView.triggerUpdate();\n        },\n        startView: function (name, startClocks) {\n            currentView.end(startClocks);\n            currentView.triggerUpdate();\n            currentView = trackViewChange(startClocks, name);\n        },\n        stop: function () {\n            stopViewCollectionMode();\n            stopInitialViewTracking();\n            stopViewLifeCycle();\n            currentView.end();\n        },\n    };\n}\nfunction newView(lifeCycle, domMutationObservable, initialLocation, initialHasReplay, loadingType, referrer, startClocks, name) {\n    if (startClocks === void 0) { startClocks = clocksNow(); }\n    // Setup initial values\n    var id = generateUUID();\n    var timings = {};\n    var customTimings = {};\n    var documentVersion = 0;\n    var endClocks;\n    var location = __assign({}, initialLocation);\n    var hasReplay = initialHasReplay;\n    lifeCycle.notify(LifeCycleEventType.VIEW_CREATED, { id: id, name: name, startClocks: startClocks, location: location, referrer: referrer });\n    // Update the view every time the measures are changing\n    var _a = throttle(monitor(triggerViewUpdate), THROTTLE_VIEW_UPDATE_PERIOD, {\n        leading: false,\n    }), scheduleViewUpdate = _a.throttled, cancelScheduleViewUpdate = _a.cancel;\n    var _b = trackViewMetrics(lifeCycle, domMutationObservable, scheduleViewUpdate, loadingType), setLoadEvent = _b.setLoadEvent, stopViewMetricsTracking = _b.stop, viewMetrics = _b.viewMetrics;\n    // Initial view update\n    triggerViewUpdate();\n    function triggerViewUpdate() {\n        documentVersion += 1;\n        var currentEnd = endClocks === undefined ? timeStampNow() : endClocks.timeStamp;\n        lifeCycle.notify(LifeCycleEventType.VIEW_UPDATED, __assign(__assign({}, viewMetrics), { customTimings: customTimings,\n            documentVersion: documentVersion,\n            id: id,\n            name: name,\n            loadingType: loadingType,\n            location: location,\n            hasReplay: hasReplay,\n            referrer: referrer,\n            startClocks: startClocks,\n            timings: timings, duration: elapsed(startClocks.timeStamp, currentEnd), isActive: endClocks === undefined }));\n    }\n    return {\n        name: name,\n        scheduleUpdate: scheduleViewUpdate,\n        end: function (clocks) {\n            if (clocks === void 0) { clocks = clocksNow(); }\n            endClocks = clocks;\n            stopViewMetricsTracking();\n            lifeCycle.notify(LifeCycleEventType.VIEW_ENDED, { endClocks: endClocks });\n        },\n        getLocation: function () {\n            return location;\n        },\n        triggerUpdate: function () {\n            // cancel any pending view updates execution\n            cancelScheduleViewUpdate();\n            triggerViewUpdate();\n        },\n        updateTimings: function (newTimings) {\n            timings = newTimings;\n            if (newTimings.loadEvent !== undefined) {\n                setLoadEvent(newTimings.loadEvent);\n            }\n        },\n        addTiming: function (name, time) {\n            customTimings[sanitizeTiming(name)] = elapsed(startClocks.timeStamp, time);\n        },\n        updateLocation: function (newLocation) {\n            location = __assign({}, newLocation);\n        },\n        updateHasReplay: function (newHasReplay) {\n            hasReplay = newHasReplay;\n        },\n        get url() {\n            return location.href;\n        },\n    };\n}\n/**\n * Timing name is used as facet path that must contain only letters, digits, or the characters - _ . @ $\n */\nfunction sanitizeTiming(name) {\n    var sanitized = name.replace(/[^a-zA-Z0-9-_.@$]/g, '_');\n    if (sanitized !== name) {\n        display.warn(\"Invalid timing name: \" + name + \", sanitized to: \" + sanitized);\n    }\n    return sanitized;\n}\n//# sourceMappingURL=trackViews.js.map"]},"metadata":{},"sourceType":"module"}