{"ast":null,"code":"import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, ErrorSource, isPercentage, makePublicApi, monitor, clocksNow, timeStampNow, display, commonInit } from '@datadog/browser-core';\nimport { ActionType } from '../rawRumEvent.types';\nimport { buildEnv } from './buildEnv';\nexport function makeRumPublicApi(startRumImpl) {\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var user = {};\n\n  var getInternalContextStrategy = function getInternalContextStrategy() {\n    return undefined;\n  };\n\n  var bufferApiCalls = new BoundedBuffer();\n\n  var _addTimingStrategy = function addTimingStrategy(name, time) {\n    if (time === void 0) {\n      time = timeStampNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addTimingStrategy(name, time);\n    });\n  };\n\n  var _startViewStrategy = function startViewStrategy(name, startClocks) {\n    if (startClocks === void 0) {\n      startClocks = clocksNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return _startViewStrategy(name, startClocks);\n    });\n  };\n\n  var _addActionStrategy = function addActionStrategy(action, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addActionStrategy(action, commonContext);\n    });\n  };\n\n  var _addErrorStrategy = function addErrorStrategy(providedError, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addErrorStrategy(providedError, commonContext);\n    });\n  };\n\n  function clonedCommonContext() {\n    return deepClone({\n      context: globalContextManager.get(),\n      user: user\n    });\n  }\n\n  function initRum(userConfiguration) {\n    if (!checkCookiesAuthorized(buildCookieOptions(userConfiguration)) || !checkIsNotLocalFile() || !canInitRum(userConfiguration)) {\n      return;\n    }\n\n    if (userConfiguration.publicApiKey) {\n      userConfiguration.clientToken = userConfiguration.publicApiKey;\n    }\n\n    var _a = commonInit(userConfiguration, buildEnv),\n        configuration = _a.configuration,\n        internalMonitoring = _a.internalMonitoring;\n\n    if (!configuration.isEnabled('view-renaming') || !configuration.trackViewsManually) {\n      doStartRum();\n    } else {\n      // drain beforeInitCalls by buffering them until we start RUM\n      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n      // in order to ensure that calls are processed in order\n      var beforeInitCalls = bufferApiCalls;\n      bufferApiCalls = new BoundedBuffer();\n\n      _startViewStrategy = function _startViewStrategy(name) {\n        doStartRum(name);\n      };\n\n      beforeInitCalls.drain();\n    }\n\n    isAlreadyInitialized = true;\n\n    function doStartRum(initialViewName) {\n      var _a;\n\n      var startView;\n      _a = startRumImpl(userConfiguration, configuration, internalMonitoring, function () {\n        return {\n          user: user,\n          context: globalContextManager.get()\n        };\n      }, initialViewName), startView = _a.startView, _addActionStrategy = _a.addAction, _addErrorStrategy = _a.addError, _addTimingStrategy = _a.addTiming, getInternalContextStrategy = _a.getInternalContext;\n\n      if (configuration.isEnabled('view-renaming')) {\n        _startViewStrategy = startView;\n      }\n\n      bufferApiCalls.drain();\n    }\n  }\n\n  var rumPublicApi = makePublicApi({\n    init: monitor(initRum),\n    addRumGlobalContext: monitor(globalContextManager.add),\n    removeRumGlobalContext: monitor(globalContextManager.remove),\n    getRumGlobalContext: monitor(globalContextManager.get),\n    setRumGlobalContext: monitor(globalContextManager.set),\n    getInternalContext: monitor(function (startTime) {\n      return getInternalContextStrategy(startTime);\n    }),\n    addAction: monitor(function (name, context) {\n      _addActionStrategy({\n        name: name,\n        context: deepClone(context),\n        startClocks: clocksNow(),\n        type: ActionType.CUSTOM\n      });\n    }),\n\n    /**\n     * @deprecated use addAction instead\n     */\n    addUserAction: function addUserAction(name, context) {\n      rumPublicApi.addAction(name, context);\n    },\n    addError: monitor(function (error, context, source) {\n      if (source === void 0) {\n        source = ErrorSource.CUSTOM;\n      }\n\n      var checkedSource;\n\n      if (source === ErrorSource.CUSTOM || source === ErrorSource.NETWORK || source === ErrorSource.SOURCE) {\n        checkedSource = source;\n      } else {\n        display.error(\"DD_RUM.addError: Invalid source '\" + source + \"'\");\n        checkedSource = ErrorSource.CUSTOM;\n      }\n\n      _addErrorStrategy({\n        error: error,\n        context: deepClone(context),\n        source: checkedSource,\n        startClocks: clocksNow()\n      });\n    }),\n    addTiming: monitor(function (name) {\n      _addTimingStrategy(name);\n    }),\n    setUser: monitor(function (newUser) {\n      var sanitizedUser = sanitizeUser(newUser);\n\n      if (sanitizedUser) {\n        user = sanitizedUser;\n      } else {\n        display.error('Unsupported user:', newUser);\n      }\n    }),\n    removeUser: monitor(function () {\n      user = {};\n    })\n  });\n  rumPublicApi['startView'] = monitor(function (name) {\n    _startViewStrategy(name);\n  });\n  return rumPublicApi;\n\n  function sanitizeUser(newUser) {\n    if (typeof newUser !== 'object' || !newUser) {\n      return;\n    }\n\n    var result = deepClone(newUser);\n\n    if ('id' in result) {\n      result.id = String(result.id);\n    }\n\n    if ('name' in result) {\n      result.name = String(result.name);\n    }\n\n    if ('email' in result) {\n      result.email = String(result.email);\n    }\n\n    return result;\n  }\n\n  function canInitRum(userConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!userConfiguration.silentMultipleInit) {\n        display.error('DD_RUM is already initialized.');\n      }\n\n      return false;\n    }\n\n    if (!userConfiguration || !userConfiguration.clientToken && !userConfiguration.publicApiKey) {\n      display.error('Client Token is not configured, we will not send any data.');\n      return false;\n    }\n\n    if (!userConfiguration.applicationId) {\n      display.error('Application ID is not configured, no RUM data will be collected.');\n      return false;\n    }\n\n    if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n      display.error('Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {\n      display.error('Resource Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (Array.isArray(userConfiguration.allowedTracingOrigins) && userConfiguration.allowedTracingOrigins.length !== 0 && userConfiguration.service === undefined) {\n      display.error('Service need to be configured when tracing is enabled');\n      return false;\n    }\n\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/boot/rumPublicApi.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, ErrorSource, isPercentage, makePublicApi, monitor, clocksNow, timeStampNow, display, commonInit, } from '@datadog/browser-core';\nimport { ActionType } from '../rawRumEvent.types';\nimport { buildEnv } from './buildEnv';\nexport function makeRumPublicApi(startRumImpl) {\n    var isAlreadyInitialized = false;\n    var globalContextManager = createContextManager();\n    var user = {};\n    var getInternalContextStrategy = function () { return undefined; };\n    var bufferApiCalls = new BoundedBuffer();\n    var addTimingStrategy = function (name, time) {\n        if (time === void 0) { time = timeStampNow(); }\n        bufferApiCalls.add(function () { return addTimingStrategy(name, time); });\n    };\n    var startViewStrategy = function (name, startClocks) {\n        if (startClocks === void 0) { startClocks = clocksNow(); }\n        bufferApiCalls.add(function () { return startViewStrategy(name, startClocks); });\n    };\n    var addActionStrategy = function (action, commonContext) {\n        if (commonContext === void 0) { commonContext = clonedCommonContext(); }\n        bufferApiCalls.add(function () { return addActionStrategy(action, commonContext); });\n    };\n    var addErrorStrategy = function (providedError, commonContext) {\n        if (commonContext === void 0) { commonContext = clonedCommonContext(); }\n        bufferApiCalls.add(function () { return addErrorStrategy(providedError, commonContext); });\n    };\n    function clonedCommonContext() {\n        return deepClone({\n            context: globalContextManager.get(),\n            user: user,\n        });\n    }\n    function initRum(userConfiguration) {\n        if (!checkCookiesAuthorized(buildCookieOptions(userConfiguration)) ||\n            !checkIsNotLocalFile() ||\n            !canInitRum(userConfiguration)) {\n            return;\n        }\n        if (userConfiguration.publicApiKey) {\n            userConfiguration.clientToken = userConfiguration.publicApiKey;\n        }\n        var _a = commonInit(userConfiguration, buildEnv), configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;\n        if (!configuration.isEnabled('view-renaming') || !configuration.trackViewsManually) {\n            doStartRum();\n        }\n        else {\n            // drain beforeInitCalls by buffering them until we start RUM\n            // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n            // in order to ensure that calls are processed in order\n            var beforeInitCalls = bufferApiCalls;\n            bufferApiCalls = new BoundedBuffer();\n            startViewStrategy = function (name) {\n                doStartRum(name);\n            };\n            beforeInitCalls.drain();\n        }\n        isAlreadyInitialized = true;\n        function doStartRum(initialViewName) {\n            var _a;\n            var startView;\n            (_a = startRumImpl(userConfiguration, configuration, internalMonitoring, function () { return ({\n                user: user,\n                context: globalContextManager.get(),\n            }); }, initialViewName), startView = _a.startView, addActionStrategy = _a.addAction, addErrorStrategy = _a.addError, addTimingStrategy = _a.addTiming, getInternalContextStrategy = _a.getInternalContext);\n            if (configuration.isEnabled('view-renaming')) {\n                startViewStrategy = startView;\n            }\n            bufferApiCalls.drain();\n        }\n    }\n    var rumPublicApi = makePublicApi({\n        init: monitor(initRum),\n        addRumGlobalContext: monitor(globalContextManager.add),\n        removeRumGlobalContext: monitor(globalContextManager.remove),\n        getRumGlobalContext: monitor(globalContextManager.get),\n        setRumGlobalContext: monitor(globalContextManager.set),\n        getInternalContext: monitor(function (startTime) { return getInternalContextStrategy(startTime); }),\n        addAction: monitor(function (name, context) {\n            addActionStrategy({\n                name: name,\n                context: deepClone(context),\n                startClocks: clocksNow(),\n                type: ActionType.CUSTOM,\n            });\n        }),\n        /**\n         * @deprecated use addAction instead\n         */\n        addUserAction: function (name, context) {\n            rumPublicApi.addAction(name, context);\n        },\n        addError: monitor(function (error, context, source) {\n            if (source === void 0) { source = ErrorSource.CUSTOM; }\n            var checkedSource;\n            if (source === ErrorSource.CUSTOM || source === ErrorSource.NETWORK || source === ErrorSource.SOURCE) {\n                checkedSource = source;\n            }\n            else {\n                display.error(\"DD_RUM.addError: Invalid source '\" + source + \"'\");\n                checkedSource = ErrorSource.CUSTOM;\n            }\n            addErrorStrategy({\n                error: error,\n                context: deepClone(context),\n                source: checkedSource,\n                startClocks: clocksNow(),\n            });\n        }),\n        addTiming: monitor(function (name) {\n            addTimingStrategy(name);\n        }),\n        setUser: monitor(function (newUser) {\n            var sanitizedUser = sanitizeUser(newUser);\n            if (sanitizedUser) {\n                user = sanitizedUser;\n            }\n            else {\n                display.error('Unsupported user:', newUser);\n            }\n        }),\n        removeUser: monitor(function () {\n            user = {};\n        }),\n    });\n    rumPublicApi['startView'] = monitor(function (name) {\n        startViewStrategy(name);\n    });\n    return rumPublicApi;\n    function sanitizeUser(newUser) {\n        if (typeof newUser !== 'object' || !newUser) {\n            return;\n        }\n        var result = deepClone(newUser);\n        if ('id' in result) {\n            result.id = String(result.id);\n        }\n        if ('name' in result) {\n            result.name = String(result.name);\n        }\n        if ('email' in result) {\n            result.email = String(result.email);\n        }\n        return result;\n    }\n    function canInitRum(userConfiguration) {\n        if (isAlreadyInitialized) {\n            if (!userConfiguration.silentMultipleInit) {\n                display.error('DD_RUM is already initialized.');\n            }\n            return false;\n        }\n        if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {\n            display.error('Client Token is not configured, we will not send any data.');\n            return false;\n        }\n        if (!userConfiguration.applicationId) {\n            display.error('Application ID is not configured, no RUM data will be collected.');\n            return false;\n        }\n        if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n            display.error('Sample Rate should be a number between 0 and 100');\n            return false;\n        }\n        if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {\n            display.error('Resource Sample Rate should be a number between 0 and 100');\n            return false;\n        }\n        if (Array.isArray(userConfiguration.allowedTracingOrigins) &&\n            userConfiguration.allowedTracingOrigins.length !== 0 &&\n            userConfiguration.service === undefined) {\n            display.error('Service need to be configured when tracing is enabled');\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=rumPublicApi.js.map"]},"metadata":{},"sourceType":"module"}