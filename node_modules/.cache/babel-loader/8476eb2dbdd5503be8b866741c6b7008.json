{"ast":null,"code":"var _a;\n\nimport { __assign } from \"tslib\";\nimport { BuildMode } from '../boot/init';\nimport { includes } from '../tools/utils';\nvar ENDPOINTS = {\n  alternate: {\n    logs: 'logs',\n    rum: 'rum',\n    sessionReplay: 'session-replay',\n    trace: 'trace'\n  },\n  classic: {\n    logs: 'browser',\n    rum: 'rum',\n    // session-replay has no classic endpoint\n    sessionReplay: undefined,\n    trace: 'public-trace'\n  }\n};\nexport var Datacenter = {\n  EU: 'eu',\n  US: 'us'\n};\nexport var INTAKE_SITE = (_a = {}, _a[Datacenter.EU] = 'datadoghq.eu', _a[Datacenter.US] = 'datadoghq.com', _a);\nvar CLASSIC_ALLOWED_SITES = [INTAKE_SITE[Datacenter.US], INTAKE_SITE[Datacenter.EU]];\nexport function computeTransportConfiguration(userConfiguration, buildEnv) {\n  var transportSettings = {\n    buildMode: buildEnv.buildMode,\n    clientToken: userConfiguration.clientToken,\n    env: userConfiguration.env,\n    proxyHost: userConfiguration.proxyHost,\n    sdkVersion: buildEnv.sdkVersion,\n    service: userConfiguration.service,\n    site: userConfiguration.site || INTAKE_SITE[userConfiguration.datacenter || buildEnv.datacenter],\n    version: userConfiguration.version\n  };\n  var intakeType = getIntakeType(transportSettings.site, userConfiguration);\n  var intakeUrls = getIntakeUrls(intakeType, transportSettings, userConfiguration.replica !== undefined);\n  var configuration = {\n    isIntakeUrl: function isIntakeUrl(url) {\n      return intakeUrls.some(function (intakeUrl) {\n        return url.indexOf(intakeUrl) === 0;\n      });\n    },\n    logsEndpoint: getEndpoint(intakeType, 'logs', transportSettings),\n    rumEndpoint: getEndpoint(intakeType, 'rum', transportSettings),\n    sessionReplayEndpoint: getEndpoint(intakeType, 'sessionReplay', transportSettings),\n    traceEndpoint: getEndpoint(intakeType, 'trace', transportSettings)\n  };\n\n  if (userConfiguration.internalMonitoringApiKey) {\n    configuration.internalMonitoringEndpoint = getEndpoint(intakeType, 'logs', transportSettings, 'browser-agent-internal-monitoring');\n  }\n\n  if (transportSettings.buildMode === BuildMode.E2E_TEST) {\n    configuration.internalMonitoringEndpoint = '<<< E2E INTERNAL MONITORING ENDPOINT >>>';\n    configuration.logsEndpoint = '<<< E2E LOGS ENDPOINT >>>';\n    configuration.rumEndpoint = '<<< E2E RUM ENDPOINT >>>';\n    configuration.sessionReplayEndpoint = '<<< E2E SESSION REPLAY ENDPOINT >>>';\n  }\n\n  if (transportSettings.buildMode === BuildMode.STAGING) {\n    if (userConfiguration.replica !== undefined) {\n      var replicaTransportSettings = __assign(__assign({}, transportSettings), {\n        applicationId: userConfiguration.replica.applicationId,\n        clientToken: userConfiguration.replica.clientToken,\n        site: INTAKE_SITE[Datacenter.US]\n      });\n\n      configuration.replica = {\n        applicationId: userConfiguration.replica.applicationId,\n        internalMonitoringEndpoint: getEndpoint(intakeType, 'logs', replicaTransportSettings, 'browser-agent-internal-monitoring'),\n        logsEndpoint: getEndpoint(intakeType, 'logs', replicaTransportSettings),\n        rumEndpoint: getEndpoint(intakeType, 'rum', replicaTransportSettings)\n      };\n    }\n  }\n\n  return configuration;\n}\n\nfunction getIntakeType(site, userConfiguration) {\n  return !userConfiguration.useAlternateIntakeDomains && includes(CLASSIC_ALLOWED_SITES, site) ? 'classic' : 'alternate';\n}\n\nfunction getIntakeUrls(intakeType, settings, withReplica) {\n  if (settings.proxyHost) {\n    return [\"https://\" + settings.proxyHost + \"/v1/input/\"];\n  }\n\n  var sites = [settings.site];\n\n  if (settings.buildMode === BuildMode.STAGING && withReplica) {\n    sites.push(INTAKE_SITE[Datacenter.US]);\n  }\n\n  var urls = [];\n  var endpointTypes = Object.keys(ENDPOINTS[intakeType]);\n\n  for (var _i = 0, sites_1 = sites; _i < sites_1.length; _i++) {\n    var site = sites_1[_i];\n\n    for (var _a = 0, endpointTypes_1 = endpointTypes; _a < endpointTypes_1.length; _a++) {\n      var endpointType = endpointTypes_1[_a];\n      urls.push(\"https://\" + getHost(intakeType, endpointType, site) + \"/v1/input/\");\n    }\n  }\n\n  return urls;\n}\n\nfunction getHost(intakeType, endpointType, site) {\n  return intakeType === 'classic' && getClassicHost(endpointType, site) || getAlternateHost(endpointType, site);\n}\n\nfunction getClassicHost(endpointType, site) {\n  var endpoint = ENDPOINTS.classic[endpointType];\n  return endpoint && endpoint + \"-http-intake.logs.\" + site;\n}\n\nfunction getAlternateHost(endpointType, site) {\n  var endpoint = ENDPOINTS.alternate[endpointType];\n  var domainParts = site.split('.');\n  var extension = domainParts.pop();\n  var suffix = domainParts.join('-') + \".\" + extension;\n  return endpoint + \".browser-intake-\" + suffix;\n}\n\nfunction getEndpoint(intakeType, endpointType, settings, source) {\n  var tags = \"sdk_version:\" + settings.sdkVersion + (\"\" + (settings.env ? \",env:\" + settings.env : '')) + (\"\" + (settings.service ? \",service:\" + settings.service : '')) + (\"\" + (settings.version ? \",version:\" + settings.version : ''));\n  var datadogHost = getHost(intakeType, endpointType, settings.site);\n  var host = settings.proxyHost ? settings.proxyHost : datadogHost;\n  var proxyParameter = settings.proxyHost ? \"ddhost=\" + datadogHost + \"&\" : '';\n  var parameters = proxyParameter + \"ddsource=\" + (source || 'browser') + \"&ddtags=\" + encodeURIComponent(tags);\n  return \"https://\" + host + \"/v1/input/\" + settings.clientToken + \"?\" + parameters;\n}","map":{"version":3,"sources":["../../src/domain/transportConfiguration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var _a;\nimport { __assign } from \"tslib\";\nimport { BuildMode } from '../boot/init';\nimport { includes } from '../tools/utils';\nvar ENDPOINTS = {\n    alternate: {\n        logs: 'logs',\n        rum: 'rum',\n        sessionReplay: 'session-replay',\n        trace: 'trace',\n    },\n    classic: {\n        logs: 'browser',\n        rum: 'rum',\n        // session-replay has no classic endpoint\n        sessionReplay: undefined,\n        trace: 'public-trace',\n    },\n};\nexport var Datacenter = {\n    EU: 'eu',\n    US: 'us',\n};\nexport var INTAKE_SITE = (_a = {},\n    _a[Datacenter.EU] = 'datadoghq.eu',\n    _a[Datacenter.US] = 'datadoghq.com',\n    _a);\nvar CLASSIC_ALLOWED_SITES = [INTAKE_SITE[Datacenter.US], INTAKE_SITE[Datacenter.EU]];\nexport function computeTransportConfiguration(userConfiguration, buildEnv) {\n    var transportSettings = {\n        buildMode: buildEnv.buildMode,\n        clientToken: userConfiguration.clientToken,\n        env: userConfiguration.env,\n        proxyHost: userConfiguration.proxyHost,\n        sdkVersion: buildEnv.sdkVersion,\n        service: userConfiguration.service,\n        site: userConfiguration.site || INTAKE_SITE[userConfiguration.datacenter || buildEnv.datacenter],\n        version: userConfiguration.version,\n    };\n    var intakeType = getIntakeType(transportSettings.site, userConfiguration);\n    var intakeUrls = getIntakeUrls(intakeType, transportSettings, userConfiguration.replica !== undefined);\n    var configuration = {\n        isIntakeUrl: function (url) { return intakeUrls.some(function (intakeUrl) { return url.indexOf(intakeUrl) === 0; }); },\n        logsEndpoint: getEndpoint(intakeType, 'logs', transportSettings),\n        rumEndpoint: getEndpoint(intakeType, 'rum', transportSettings),\n        sessionReplayEndpoint: getEndpoint(intakeType, 'sessionReplay', transportSettings),\n        traceEndpoint: getEndpoint(intakeType, 'trace', transportSettings),\n    };\n    if (userConfiguration.internalMonitoringApiKey) {\n        configuration.internalMonitoringEndpoint = getEndpoint(intakeType, 'logs', transportSettings, 'browser-agent-internal-monitoring');\n    }\n    if (transportSettings.buildMode === BuildMode.E2E_TEST) {\n        configuration.internalMonitoringEndpoint = '<<< E2E INTERNAL MONITORING ENDPOINT >>>';\n        configuration.logsEndpoint = '<<< E2E LOGS ENDPOINT >>>';\n        configuration.rumEndpoint = '<<< E2E RUM ENDPOINT >>>';\n        configuration.sessionReplayEndpoint = '<<< E2E SESSION REPLAY ENDPOINT >>>';\n    }\n    if (transportSettings.buildMode === BuildMode.STAGING) {\n        if (userConfiguration.replica !== undefined) {\n            var replicaTransportSettings = __assign(__assign({}, transportSettings), { applicationId: userConfiguration.replica.applicationId, clientToken: userConfiguration.replica.clientToken, site: INTAKE_SITE[Datacenter.US] });\n            configuration.replica = {\n                applicationId: userConfiguration.replica.applicationId,\n                internalMonitoringEndpoint: getEndpoint(intakeType, 'logs', replicaTransportSettings, 'browser-agent-internal-monitoring'),\n                logsEndpoint: getEndpoint(intakeType, 'logs', replicaTransportSettings),\n                rumEndpoint: getEndpoint(intakeType, 'rum', replicaTransportSettings),\n            };\n        }\n    }\n    return configuration;\n}\nfunction getIntakeType(site, userConfiguration) {\n    return !userConfiguration.useAlternateIntakeDomains && includes(CLASSIC_ALLOWED_SITES, site) ? 'classic' : 'alternate';\n}\nfunction getIntakeUrls(intakeType, settings, withReplica) {\n    if (settings.proxyHost) {\n        return [\"https://\" + settings.proxyHost + \"/v1/input/\"];\n    }\n    var sites = [settings.site];\n    if (settings.buildMode === BuildMode.STAGING && withReplica) {\n        sites.push(INTAKE_SITE[Datacenter.US]);\n    }\n    var urls = [];\n    var endpointTypes = Object.keys(ENDPOINTS[intakeType]);\n    for (var _i = 0, sites_1 = sites; _i < sites_1.length; _i++) {\n        var site = sites_1[_i];\n        for (var _a = 0, endpointTypes_1 = endpointTypes; _a < endpointTypes_1.length; _a++) {\n            var endpointType = endpointTypes_1[_a];\n            urls.push(\"https://\" + getHost(intakeType, endpointType, site) + \"/v1/input/\");\n        }\n    }\n    return urls;\n}\nfunction getHost(intakeType, endpointType, site) {\n    return (intakeType === 'classic' && getClassicHost(endpointType, site)) || getAlternateHost(endpointType, site);\n}\nfunction getClassicHost(endpointType, site) {\n    var endpoint = ENDPOINTS.classic[endpointType];\n    return endpoint && endpoint + \"-http-intake.logs.\" + site;\n}\nfunction getAlternateHost(endpointType, site) {\n    var endpoint = ENDPOINTS.alternate[endpointType];\n    var domainParts = site.split('.');\n    var extension = domainParts.pop();\n    var suffix = domainParts.join('-') + \".\" + extension;\n    return endpoint + \".browser-intake-\" + suffix;\n}\nfunction getEndpoint(intakeType, endpointType, settings, source) {\n    var tags = \"sdk_version:\" + settings.sdkVersion +\n        (\"\" + (settings.env ? \",env:\" + settings.env : '')) +\n        (\"\" + (settings.service ? \",service:\" + settings.service : '')) +\n        (\"\" + (settings.version ? \",version:\" + settings.version : ''));\n    var datadogHost = getHost(intakeType, endpointType, settings.site);\n    var host = settings.proxyHost ? settings.proxyHost : datadogHost;\n    var proxyParameter = settings.proxyHost ? \"ddhost=\" + datadogHost + \"&\" : '';\n    var parameters = proxyParameter + \"ddsource=\" + (source || 'browser') + \"&ddtags=\" + encodeURIComponent(tags);\n    return \"https://\" + host + \"/v1/input/\" + settings.clientToken + \"?\" + parameters;\n}\n//# sourceMappingURL=transportConfiguration.js.map"]},"metadata":{},"sourceType":"module"}