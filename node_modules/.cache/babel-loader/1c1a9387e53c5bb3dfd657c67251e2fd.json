{"ast":null,"code":"import { monitor } from '@datadog/browser-core';\nexport function createDOMMutationObservable() {\n  var callbacks = [];\n  var MutationObserver = getMutationObserverConstructor();\n  var observer = MutationObserver ? new MutationObserver(monitor(notify)) : undefined;\n\n  function notify() {\n    callbacks.forEach(function (callback) {\n      return callback();\n    });\n  }\n\n  function startDOMObservation() {\n    if (!observer) {\n      return;\n    }\n\n    observer.observe(document, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n\n  function stopDOMObservation() {\n    if (!observer) {\n      return;\n    }\n\n    observer.disconnect();\n  }\n\n  return {\n    subscribe: function subscribe(callback) {\n      if (!callbacks.length) {\n        startDOMObservation();\n      }\n\n      callbacks.push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          callbacks = callbacks.filter(function (other) {\n            return callback !== other;\n          });\n\n          if (!callbacks.length) {\n            stopDOMObservation();\n          }\n        }\n      };\n    }\n  };\n}\nexport function getMutationObserverConstructor() {\n  var constructor;\n  var browserWindow = window; // Angular uses Zone.js to provide a context persisting accross async tasks.  Zone.js replaces the\n  // global MutationObserver constructor with a patched version to support the context propagation.\n  // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n  // component: on some occasions, the callback is being called in an infinite loop, causing the\n  // page to freeze (even if the callback is completely empty).\n  //\n  // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n  // MutationObserver constructor.\n  //\n  // [1] https://github.com/angular/angular/issues/26948\n  // [2] https://github.com/angular/angular/issues/31712\n\n  if (browserWindow.Zone) {\n    var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n\n    constructor = browserWindow[symbol];\n  }\n\n  if (!constructor) {\n    constructor = browserWindow.MutationObserver;\n  }\n\n  return constructor;\n}","map":{"version":3,"sources":["../../src/browser/domMutationObservable.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAsC,uBAAtC;AAMA,OAAM,SAAU,2BAAV,GAAqC;AACzC,MAAI,SAAS,GAAsB,EAAnC;AACA,MAAM,gBAAgB,GAAG,8BAA8B,EAAvD;AACA,MAAM,QAAQ,GAAG,gBAAgB,GAAG,IAAI,gBAAJ,CAAqB,OAAO,CAAC,MAAD,CAA5B,CAAH,GAA2C,SAA5E;;AAEA,WAAS,MAAT,GAAe;AACb,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,QAAD,EAAS;AAAK,aAAA,QAAA,EAAA;AAAU,KAA1C;AACD;;AAED,WAAS,mBAAT,GAA4B;AAC1B,QAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB,EAA2B;AACzB,MAAA,UAAU,EAAE,IADa;AAEzB,MAAA,aAAa,EAAE,IAFU;AAGzB,MAAA,SAAS,EAAE,IAHc;AAIzB,MAAA,OAAO,EAAE;AAJgB,KAA3B;AAMD;;AAED,WAAS,kBAAT,GAA2B;AACzB,QAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,IAAA,QAAQ,CAAC,UAAT;AACD;;AAED,SAAO;AACL,IAAA,SAAS,EAAE,mBAAC,QAAD,EAAS;AAClB,UAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACrB,QAAA,mBAAmB;AACpB;;AAED,MAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACA,aAAO;AACL,QAAA,WAAW,EAAE,uBAAA;AACX,UAAA,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAC,KAAD,EAAM;AAAK,mBAAA,QAAQ,KAAR,KAAA;AAAkB,WAA9C,CAAZ;;AAEA,cAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACrB,YAAA,kBAAkB;AACnB;AACF;AAPI,OAAP;AASD;AAhBI,GAAP;AAkBD;AAUD,OAAM,SAAU,8BAAV,GAAwC;AAC5C,MAAI,WAAJ;AACA,MAAM,aAAa,GAAkB,MAArC,CAF4C,CAI5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,aAAa,CAAC,IAAlB,EAAwB;AACtB,QAAM,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,UAAnB,CAA8B,kBAA9B,CAAf;;AACA,IAAA,WAAW,GAAG,aAAa,CAAC,MAAD,CAA3B;AACD;;AAED,MAAI,CAAC,WAAL,EAAkB;AAChB,IAAA,WAAW,GAAG,aAAa,CAAC,gBAA5B;AACD;;AAED,SAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["import { monitor } from '@datadog/browser-core';\nexport function createDOMMutationObservable() {\n    var callbacks = [];\n    var MutationObserver = getMutationObserverConstructor();\n    var observer = MutationObserver ? new MutationObserver(monitor(notify)) : undefined;\n    function notify() {\n        callbacks.forEach(function (callback) { return callback(); });\n    }\n    function startDOMObservation() {\n        if (!observer) {\n            return;\n        }\n        observer.observe(document, {\n            attributes: true,\n            characterData: true,\n            childList: true,\n            subtree: true,\n        });\n    }\n    function stopDOMObservation() {\n        if (!observer) {\n            return;\n        }\n        observer.disconnect();\n    }\n    return {\n        subscribe: function (callback) {\n            if (!callbacks.length) {\n                startDOMObservation();\n            }\n            callbacks.push(callback);\n            return {\n                unsubscribe: function () {\n                    callbacks = callbacks.filter(function (other) { return callback !== other; });\n                    if (!callbacks.length) {\n                        stopDOMObservation();\n                    }\n                },\n            };\n        },\n    };\n}\nexport function getMutationObserverConstructor() {\n    var constructor;\n    var browserWindow = window;\n    // Angular uses Zone.js to provide a context persisting accross async tasks.  Zone.js replaces the\n    // global MutationObserver constructor with a patched version to support the context propagation.\n    // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n    // component: on some occasions, the callback is being called in an infinite loop, causing the\n    // page to freeze (even if the callback is completely empty).\n    //\n    // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n    // MutationObserver constructor.\n    //\n    // [1] https://github.com/angular/angular/issues/26948\n    // [2] https://github.com/angular/angular/issues/31712\n    if (browserWindow.Zone) {\n        var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n        constructor = browserWindow[symbol];\n    }\n    if (!constructor) {\n        constructor = browserWindow.MutationObserver;\n    }\n    return constructor;\n}\n//# sourceMappingURL=domMutationObservable.js.map"]},"metadata":{},"sourceType":"module"}