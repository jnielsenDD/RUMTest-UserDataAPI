{"ast":null,"code":"import { noop, elapsed, round, timeStampNow } from '@datadog/browser-core';\nimport { supportPerformanceTimingEvent } from '../../../browser/performanceCollection';\nimport { ViewLoadingType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackEventCounts } from '../../trackEventCounts';\nimport { waitIdlePageActivity } from '../../trackPageActivities';\nexport function trackViewMetrics(lifeCycle, domMutationObservable, scheduleViewUpdate, loadingType) {\n  var viewMetrics = {\n    eventCounts: {\n      errorCount: 0,\n      longTaskCount: 0,\n      resourceCount: 0,\n      userActionCount: 0\n    }\n  };\n  var stopEventCountsTracking = trackEventCounts(lifeCycle, function (newEventCounts) {\n    viewMetrics.eventCounts = newEventCounts;\n    scheduleViewUpdate();\n  }).stop;\n\n  var _a = trackLoadingTime(loadingType, function (newLoadingTime) {\n    viewMetrics.loadingTime = newLoadingTime;\n    scheduleViewUpdate();\n  }),\n      setActivityLoadingTime = _a.setActivityLoadingTime,\n      setLoadEvent = _a.setLoadEvent;\n\n  var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, domMutationObservable, setActivityLoadingTime).stop;\n  var stopCLSTracking;\n\n  if (isLayoutShiftSupported()) {\n    viewMetrics.cumulativeLayoutShift = 0;\n    stopCLSTracking = trackLayoutShift(lifeCycle, function (layoutShift) {\n      viewMetrics.cumulativeLayoutShift = round(viewMetrics.cumulativeLayoutShift + layoutShift, 4);\n      scheduleViewUpdate();\n    }).stop;\n  } else {\n    stopCLSTracking = noop;\n  }\n\n  return {\n    stop: function stop() {\n      stopEventCountsTracking();\n      stopActivityLoadingTimeTracking();\n      stopCLSTracking();\n    },\n    setLoadEvent: setLoadEvent,\n    viewMetrics: viewMetrics\n  };\n}\n\nfunction trackLoadingTime(loadType, callback) {\n  var isWaitingForLoadEvent = loadType === ViewLoadingType.INITIAL_LOAD;\n  var isWaitingForActivityLoadingTime = true;\n  var loadingTimeCandidates = [];\n\n  function invokeCallbackIfAllCandidatesAreReceived() {\n    if (!isWaitingForActivityLoadingTime && !isWaitingForLoadEvent && loadingTimeCandidates.length > 0) {\n      callback(Math.max.apply(Math, loadingTimeCandidates));\n    }\n  }\n\n  return {\n    setLoadEvent: function setLoadEvent(loadEvent) {\n      if (isWaitingForLoadEvent) {\n        isWaitingForLoadEvent = false;\n        loadingTimeCandidates.push(loadEvent);\n        invokeCallbackIfAllCandidatesAreReceived();\n      }\n    },\n    setActivityLoadingTime: function setActivityLoadingTime(activityLoadingTime) {\n      if (isWaitingForActivityLoadingTime) {\n        isWaitingForActivityLoadingTime = false;\n\n        if (activityLoadingTime !== undefined) {\n          loadingTimeCandidates.push(activityLoadingTime);\n        }\n\n        invokeCallbackIfAllCandidatesAreReceived();\n      }\n    }\n  };\n}\n\nfunction trackActivityLoadingTime(lifeCycle, domMutationObservable, callback) {\n  var startTime = timeStampNow();\n  var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, domMutationObservable, function (params) {\n    if (params.hadActivity) {\n      callback(elapsed(startTime, params.endTime));\n    } else {\n      callback(undefined);\n    }\n  }).stop;\n  return {\n    stop: stopWaitIdlePageActivity\n  };\n}\n/**\n * Track layout shifts (LS) occurring during the Views.  This yields multiple values that can be\n * added up to compute the cumulated layout shift (CLS).\n *\n * See isLayoutShiftSupported to check for browser support.\n *\n * Documentation: https://web.dev/cls/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getCLS.ts\n */\n\n\nfunction trackLayoutShift(lifeCycle, callback) {\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'layout-shift' && !entry.hadRecentInput) {\n      callback(entry.value);\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\n/**\n * Check whether `layout-shift` is supported by the browser.\n */\n\n\nfunction isLayoutShiftSupported() {\n  return supportPerformanceTimingEvent('layout-shift');\n}","map":{"version":3,"sources":["../../../../src/domain/rumEventsCollection/view/trackViewMetrics.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { noop, elapsed, round, timeStampNow } from '@datadog/browser-core';\nimport { supportPerformanceTimingEvent } from '../../../browser/performanceCollection';\nimport { ViewLoadingType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackEventCounts } from '../../trackEventCounts';\nimport { waitIdlePageActivity } from '../../trackPageActivities';\nexport function trackViewMetrics(lifeCycle, domMutationObservable, scheduleViewUpdate, loadingType) {\n    var viewMetrics = {\n        eventCounts: {\n            errorCount: 0,\n            longTaskCount: 0,\n            resourceCount: 0,\n            userActionCount: 0,\n        },\n    };\n    var stopEventCountsTracking = trackEventCounts(lifeCycle, function (newEventCounts) {\n        viewMetrics.eventCounts = newEventCounts;\n        scheduleViewUpdate();\n    }).stop;\n    var _a = trackLoadingTime(loadingType, function (newLoadingTime) {\n        viewMetrics.loadingTime = newLoadingTime;\n        scheduleViewUpdate();\n    }), setActivityLoadingTime = _a.setActivityLoadingTime, setLoadEvent = _a.setLoadEvent;\n    var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, domMutationObservable, setActivityLoadingTime).stop;\n    var stopCLSTracking;\n    if (isLayoutShiftSupported()) {\n        viewMetrics.cumulativeLayoutShift = 0;\n        (stopCLSTracking = trackLayoutShift(lifeCycle, function (layoutShift) {\n            viewMetrics.cumulativeLayoutShift = round(viewMetrics.cumulativeLayoutShift + layoutShift, 4);\n            scheduleViewUpdate();\n        }).stop);\n    }\n    else {\n        stopCLSTracking = noop;\n    }\n    return {\n        stop: function () {\n            stopEventCountsTracking();\n            stopActivityLoadingTimeTracking();\n            stopCLSTracking();\n        },\n        setLoadEvent: setLoadEvent,\n        viewMetrics: viewMetrics,\n    };\n}\nfunction trackLoadingTime(loadType, callback) {\n    var isWaitingForLoadEvent = loadType === ViewLoadingType.INITIAL_LOAD;\n    var isWaitingForActivityLoadingTime = true;\n    var loadingTimeCandidates = [];\n    function invokeCallbackIfAllCandidatesAreReceived() {\n        if (!isWaitingForActivityLoadingTime && !isWaitingForLoadEvent && loadingTimeCandidates.length > 0) {\n            callback(Math.max.apply(Math, loadingTimeCandidates));\n        }\n    }\n    return {\n        setLoadEvent: function (loadEvent) {\n            if (isWaitingForLoadEvent) {\n                isWaitingForLoadEvent = false;\n                loadingTimeCandidates.push(loadEvent);\n                invokeCallbackIfAllCandidatesAreReceived();\n            }\n        },\n        setActivityLoadingTime: function (activityLoadingTime) {\n            if (isWaitingForActivityLoadingTime) {\n                isWaitingForActivityLoadingTime = false;\n                if (activityLoadingTime !== undefined) {\n                    loadingTimeCandidates.push(activityLoadingTime);\n                }\n                invokeCallbackIfAllCandidatesAreReceived();\n            }\n        },\n    };\n}\nfunction trackActivityLoadingTime(lifeCycle, domMutationObservable, callback) {\n    var startTime = timeStampNow();\n    var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, domMutationObservable, function (params) {\n        if (params.hadActivity) {\n            callback(elapsed(startTime, params.endTime));\n        }\n        else {\n            callback(undefined);\n        }\n    }).stop;\n    return { stop: stopWaitIdlePageActivity };\n}\n/**\n * Track layout shifts (LS) occurring during the Views.  This yields multiple values that can be\n * added up to compute the cumulated layout shift (CLS).\n *\n * See isLayoutShiftSupported to check for browser support.\n *\n * Documentation: https://web.dev/cls/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getCLS.ts\n */\nfunction trackLayoutShift(lifeCycle, callback) {\n    var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n        if (entry.entryType === 'layout-shift' && !entry.hadRecentInput) {\n            callback(entry.value);\n        }\n    }).unsubscribe;\n    return {\n        stop: stop,\n    };\n}\n/**\n * Check whether `layout-shift` is supported by the browser.\n */\nfunction isLayoutShiftSupported() {\n    return supportPerformanceTimingEvent('layout-shift');\n}\n//# sourceMappingURL=trackViewMetrics.js.map"]},"metadata":{},"sourceType":"module"}