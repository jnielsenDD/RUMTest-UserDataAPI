{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { callMonitored, monitor } from '../domain/internalMonitoring';\nimport { elapsed, relativeNow, clocksNow, timeStampNow } from '../tools/timeUtils';\nimport { normalizeUrl } from '../tools/urlPolyfill';\nvar xhrProxySingleton;\nvar beforeSendCallbacks = [];\nvar onRequestCompleteCallbacks = [];\nvar originalXhrOpen;\nvar originalXhrSend;\nvar originalXhrAbort;\nexport function startXhrProxy() {\n  if (!xhrProxySingleton) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalXhrOpen = XMLHttpRequest.prototype.open; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    originalXhrSend = XMLHttpRequest.prototype.send; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    originalXhrAbort = XMLHttpRequest.prototype.abort;\n    XMLHttpRequest.prototype.open = openXhr;\n    XMLHttpRequest.prototype.send = sendXhr;\n    XMLHttpRequest.prototype.abort = abortXhr;\n    xhrProxySingleton = {\n      beforeSend: function beforeSend(callback) {\n        beforeSendCallbacks.push(callback);\n      },\n      onRequestComplete: function onRequestComplete(callback) {\n        onRequestCompleteCallbacks.push(callback);\n      }\n    };\n  }\n\n  return xhrProxySingleton;\n}\nexport function resetXhrProxy() {\n  if (xhrProxySingleton) {\n    xhrProxySingleton = undefined;\n    beforeSendCallbacks.length = 0;\n    onRequestCompleteCallbacks.length = 0;\n    XMLHttpRequest.prototype.open = originalXhrOpen;\n    XMLHttpRequest.prototype.send = originalXhrSend;\n    XMLHttpRequest.prototype.abort = originalXhrAbort;\n  }\n}\n\nfunction openXhr(method, url) {\n  var _this = this;\n\n  callMonitored(function () {\n    // WARN: since this data structure is tied to the instance, it is shared by both logs and rum\n    // and can be used by different code versions depending on customer setup\n    // so it should stay compatible with older versions\n    _this._datadog_xhr = {\n      method: method,\n      url: normalizeUrl(url)\n    };\n  });\n  return originalXhrOpen.apply(this, arguments);\n}\n\nfunction sendXhr() {\n  var _this = this;\n\n  callMonitored(function () {\n    if (!_this._datadog_xhr) {\n      return;\n    }\n\n    _this._datadog_xhr.startTime = relativeNow();\n    _this._datadog_xhr.startClocks = clocksNow();\n    _this._datadog_xhr.isAborted = false;\n    var hasBeenReported = false;\n    var originalOnreadystatechange = _this.onreadystatechange;\n\n    var onreadystatechange = function onreadystatechange() {\n      if (this.readyState === XMLHttpRequest.DONE) {\n        // Try to report the XHR as soon as possible, because the XHR may be mutated by the\n        // application during a future event. For example, Angular is calling .abort() on\n        // completed requests during a onreadystatechange event, so the status becomes '0'\n        // before the request is collected.\n        onEnd();\n      }\n\n      if (originalOnreadystatechange) {\n        originalOnreadystatechange.apply(this, arguments);\n      }\n    };\n\n    var onEnd = monitor(function () {\n      _this.removeEventListener('loadend', onEnd); // if the onreadystatechange hasn't been overridden by the user after the send()\n\n\n      if (_this.onreadystatechange === onreadystatechange) {\n        _this.onreadystatechange = originalOnreadystatechange;\n      }\n\n      if (hasBeenReported) {\n        return;\n      }\n\n      hasBeenReported = true;\n      reportXhr(_this);\n    });\n    _this.onreadystatechange = onreadystatechange;\n\n    _this.addEventListener('loadend', onEnd);\n\n    beforeSendCallbacks.forEach(function (callback) {\n      return callback(_this._datadog_xhr, _this);\n    });\n  });\n  return originalXhrSend.apply(this, arguments);\n}\n\nfunction abortXhr() {\n  var _this = this;\n\n  callMonitored(function () {\n    if (_this._datadog_xhr) {\n      _this._datadog_xhr.isAborted = true;\n    }\n  });\n  return originalXhrAbort.apply(this, arguments);\n}\n\nfunction reportXhr(xhr) {\n  xhr._datadog_xhr.duration = elapsed(xhr._datadog_xhr.startClocks.timeStamp, timeStampNow());\n  xhr._datadog_xhr.responseText = xhr.response;\n  xhr._datadog_xhr.status = xhr.status;\n  xhr._datadog_xhr.xhr = xhr;\n  onRequestCompleteCallbacks.forEach(function (callback) {\n    return callback(__assign({}, xhr._datadog_xhr));\n  });\n}","map":{"version":3,"sources":["../../src/browser/xhrProxy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { callMonitored, monitor } from '../domain/internalMonitoring';\nimport { elapsed, relativeNow, clocksNow, timeStampNow } from '../tools/timeUtils';\nimport { normalizeUrl } from '../tools/urlPolyfill';\nvar xhrProxySingleton;\nvar beforeSendCallbacks = [];\nvar onRequestCompleteCallbacks = [];\nvar originalXhrOpen;\nvar originalXhrSend;\nvar originalXhrAbort;\nexport function startXhrProxy() {\n    if (!xhrProxySingleton) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        originalXhrOpen = XMLHttpRequest.prototype.open;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        originalXhrSend = XMLHttpRequest.prototype.send;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        originalXhrAbort = XMLHttpRequest.prototype.abort;\n        XMLHttpRequest.prototype.open = openXhr;\n        XMLHttpRequest.prototype.send = sendXhr;\n        XMLHttpRequest.prototype.abort = abortXhr;\n        xhrProxySingleton = {\n            beforeSend: function (callback) {\n                beforeSendCallbacks.push(callback);\n            },\n            onRequestComplete: function (callback) {\n                onRequestCompleteCallbacks.push(callback);\n            },\n        };\n    }\n    return xhrProxySingleton;\n}\nexport function resetXhrProxy() {\n    if (xhrProxySingleton) {\n        xhrProxySingleton = undefined;\n        beforeSendCallbacks.length = 0;\n        onRequestCompleteCallbacks.length = 0;\n        XMLHttpRequest.prototype.open = originalXhrOpen;\n        XMLHttpRequest.prototype.send = originalXhrSend;\n        XMLHttpRequest.prototype.abort = originalXhrAbort;\n    }\n}\nfunction openXhr(method, url) {\n    var _this = this;\n    callMonitored(function () {\n        // WARN: since this data structure is tied to the instance, it is shared by both logs and rum\n        // and can be used by different code versions depending on customer setup\n        // so it should stay compatible with older versions\n        _this._datadog_xhr = {\n            method: method,\n            url: normalizeUrl(url),\n        };\n    });\n    return originalXhrOpen.apply(this, arguments);\n}\nfunction sendXhr() {\n    var _this = this;\n    callMonitored(function () {\n        if (!_this._datadog_xhr) {\n            return;\n        }\n        _this._datadog_xhr.startTime = relativeNow();\n        _this._datadog_xhr.startClocks = clocksNow();\n        _this._datadog_xhr.isAborted = false;\n        var hasBeenReported = false;\n        var originalOnreadystatechange = _this.onreadystatechange;\n        var onreadystatechange = function () {\n            if (this.readyState === XMLHttpRequest.DONE) {\n                // Try to report the XHR as soon as possible, because the XHR may be mutated by the\n                // application during a future event. For example, Angular is calling .abort() on\n                // completed requests during a onreadystatechange event, so the status becomes '0'\n                // before the request is collected.\n                onEnd();\n            }\n            if (originalOnreadystatechange) {\n                originalOnreadystatechange.apply(this, arguments);\n            }\n        };\n        var onEnd = monitor(function () {\n            _this.removeEventListener('loadend', onEnd);\n            // if the onreadystatechange hasn't been overridden by the user after the send()\n            if (_this.onreadystatechange === onreadystatechange) {\n                _this.onreadystatechange = originalOnreadystatechange;\n            }\n            if (hasBeenReported) {\n                return;\n            }\n            hasBeenReported = true;\n            reportXhr(_this);\n        });\n        _this.onreadystatechange = onreadystatechange;\n        _this.addEventListener('loadend', onEnd);\n        beforeSendCallbacks.forEach(function (callback) { return callback(_this._datadog_xhr, _this); });\n    });\n    return originalXhrSend.apply(this, arguments);\n}\nfunction abortXhr() {\n    var _this = this;\n    callMonitored(function () {\n        if (_this._datadog_xhr) {\n            _this._datadog_xhr.isAborted = true;\n        }\n    });\n    return originalXhrAbort.apply(this, arguments);\n}\nfunction reportXhr(xhr) {\n    xhr._datadog_xhr.duration = elapsed(xhr._datadog_xhr.startClocks.timeStamp, timeStampNow());\n    xhr._datadog_xhr.responseText = xhr.response;\n    xhr._datadog_xhr.status = xhr.status;\n    xhr._datadog_xhr.xhr = xhr;\n    onRequestCompleteCallbacks.forEach(function (callback) { return callback(__assign({}, xhr._datadog_xhr)); });\n}\n//# sourceMappingURL=xhrProxy.js.map"]},"metadata":{},"sourceType":"module"}