{"ast":null,"code":"import { noop, addEventListener, elapsed, relativeNow, addMonitoringMessage, toServerDuration } from '@datadog/browser-core'; // Arbitrary value to cap number of element (mostly for backend)\n\nexport var MAX_NUMBER_OF_FOCUSED_TIME = 500;\nvar foregroundPeriods = [];\nexport function startForegroundContexts(configuration) {\n  if (!configuration.isEnabled('track-foreground')) {\n    return {\n      getInForeground: function getInForeground() {\n        return undefined;\n      },\n      getInForegroundPeriods: function getInForegroundPeriods() {\n        return undefined;\n      },\n      stop: noop\n    };\n  }\n\n  if (document.hasFocus()) {\n    addNewForegroundPeriod();\n  }\n\n  var stopForegroundTracking = trackFocus(addNewForegroundPeriod).stop;\n  var stopBlurTracking = trackBlur(closeForegroundPeriod).stop;\n  return {\n    getInForeground: getInForeground,\n    getInForegroundPeriods: getInForegroundPeriods,\n    stop: function stop() {\n      foregroundPeriods = [];\n      stopForegroundTracking();\n      stopBlurTracking();\n    }\n  };\n}\n\nfunction addNewForegroundPeriod() {\n  if (foregroundPeriods.length > MAX_NUMBER_OF_FOCUSED_TIME) {\n    addMonitoringMessage('Reached maximum of foreground time');\n    return;\n  }\n\n  var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n\n  if (currentForegroundPeriod !== undefined && currentForegroundPeriod.end === undefined) {\n    addMonitoringMessage('Previous foreground periods not closed. Continuing current one');\n    return;\n  }\n\n  foregroundPeriods.push({\n    start: relativeNow()\n  });\n}\n\nfunction closeForegroundPeriod() {\n  if (foregroundPeriods.length === 0) {\n    addMonitoringMessage('No foreground period');\n    return;\n  }\n\n  var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n\n  if (currentForegroundPeriod.end !== undefined) {\n    addMonitoringMessage('Current foreground period already closed');\n    return;\n  }\n\n  currentForegroundPeriod.end = relativeNow();\n}\n\nfunction trackFocus(onFocusChange) {\n  return addEventListener(window, \"focus\"\n  /* FOCUS */\n  , function () {\n    return onFocusChange();\n  });\n}\n\nfunction trackBlur(onBlurChange) {\n  return addEventListener(window, \"blur\"\n  /* BLUR */\n  , function () {\n    return onBlurChange();\n  });\n}\n\nfunction getInForeground(startTime) {\n  for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n    var foregroundPeriod = foregroundPeriods[i];\n\n    if (foregroundPeriod.end !== undefined && startTime > foregroundPeriod.end) {\n      break;\n    }\n\n    if (startTime > foregroundPeriod.start && (foregroundPeriod.end === undefined || startTime < foregroundPeriod.end)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getInForegroundPeriods(eventStartTime, duration) {\n  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n  var eventEndTime = eventStartTime + duration;\n  var filteredForegroundPeriods = [];\n\n  for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n    var foregroundPeriod = foregroundPeriods[i];\n\n    if (foregroundPeriod.end !== undefined && eventStartTime > foregroundPeriod.end) {\n      // event starts after the end of the current focus period\n      // since the array is sorted, we can stop looking for foreground periods\n      break;\n    }\n\n    if (eventEndTime < foregroundPeriod.start) {\n      // event ends before the start of the current focus period\n      // continue to previous one\n      continue;\n    }\n\n    var startTime = eventStartTime > foregroundPeriod.start ? eventStartTime : foregroundPeriod.start;\n    var startDuration = elapsed(eventStartTime, startTime);\n    var endTime = foregroundPeriod.end === undefined || eventEndTime < foregroundPeriod.end ? eventEndTime : foregroundPeriod.end;\n    var endDuration = elapsed(startTime, endTime);\n    filteredForegroundPeriods.unshift({\n      start: toServerDuration(startDuration),\n      duration: toServerDuration(endDuration)\n    });\n  }\n\n  return filteredForegroundPeriods;\n}","map":{"version":3,"sources":["../../src/domain/foregroundContexts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { noop, addEventListener, elapsed, relativeNow, addMonitoringMessage, toServerDuration, } from '@datadog/browser-core';\n// Arbitrary value to cap number of element (mostly for backend)\nexport var MAX_NUMBER_OF_FOCUSED_TIME = 500;\nvar foregroundPeriods = [];\nexport function startForegroundContexts(configuration) {\n    if (!configuration.isEnabled('track-foreground')) {\n        return {\n            getInForeground: function () { return undefined; },\n            getInForegroundPeriods: function () { return undefined; },\n            stop: noop,\n        };\n    }\n    if (document.hasFocus()) {\n        addNewForegroundPeriod();\n    }\n    var stopForegroundTracking = trackFocus(addNewForegroundPeriod).stop;\n    var stopBlurTracking = trackBlur(closeForegroundPeriod).stop;\n    return {\n        getInForeground: getInForeground,\n        getInForegroundPeriods: getInForegroundPeriods,\n        stop: function () {\n            foregroundPeriods = [];\n            stopForegroundTracking();\n            stopBlurTracking();\n        },\n    };\n}\nfunction addNewForegroundPeriod() {\n    if (foregroundPeriods.length > MAX_NUMBER_OF_FOCUSED_TIME) {\n        addMonitoringMessage('Reached maximum of foreground time');\n        return;\n    }\n    var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n    if (currentForegroundPeriod !== undefined && currentForegroundPeriod.end === undefined) {\n        addMonitoringMessage('Previous foreground periods not closed. Continuing current one');\n        return;\n    }\n    foregroundPeriods.push({\n        start: relativeNow(),\n    });\n}\nfunction closeForegroundPeriod() {\n    if (foregroundPeriods.length === 0) {\n        addMonitoringMessage('No foreground period');\n        return;\n    }\n    var currentForegroundPeriod = foregroundPeriods[foregroundPeriods.length - 1];\n    if (currentForegroundPeriod.end !== undefined) {\n        addMonitoringMessage('Current foreground period already closed');\n        return;\n    }\n    currentForegroundPeriod.end = relativeNow();\n}\nfunction trackFocus(onFocusChange) {\n    return addEventListener(window, \"focus\" /* FOCUS */, function () { return onFocusChange(); });\n}\nfunction trackBlur(onBlurChange) {\n    return addEventListener(window, \"blur\" /* BLUR */, function () { return onBlurChange(); });\n}\nfunction getInForeground(startTime) {\n    for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n        var foregroundPeriod = foregroundPeriods[i];\n        if (foregroundPeriod.end !== undefined && startTime > foregroundPeriod.end) {\n            break;\n        }\n        if (startTime > foregroundPeriod.start &&\n            (foregroundPeriod.end === undefined || startTime < foregroundPeriod.end)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getInForegroundPeriods(eventStartTime, duration) {\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    var eventEndTime = (eventStartTime + duration);\n    var filteredForegroundPeriods = [];\n    for (var i = foregroundPeriods.length - 1; i >= 0; i--) {\n        var foregroundPeriod = foregroundPeriods[i];\n        if (foregroundPeriod.end !== undefined && eventStartTime > foregroundPeriod.end) {\n            // event starts after the end of the current focus period\n            // since the array is sorted, we can stop looking for foreground periods\n            break;\n        }\n        if (eventEndTime < foregroundPeriod.start) {\n            // event ends before the start of the current focus period\n            // continue to previous one\n            continue;\n        }\n        var startTime = eventStartTime > foregroundPeriod.start ? eventStartTime : foregroundPeriod.start;\n        var startDuration = elapsed(eventStartTime, startTime);\n        var endTime = foregroundPeriod.end === undefined || eventEndTime < foregroundPeriod.end ? eventEndTime : foregroundPeriod.end;\n        var endDuration = elapsed(startTime, endTime);\n        filteredForegroundPeriods.unshift({\n            start: toServerDuration(startDuration),\n            duration: toServerDuration(endDuration),\n        });\n    }\n    return filteredForegroundPeriods;\n}\n//# sourceMappingURL=foregroundContexts.js.map"]},"metadata":{},"sourceType":"module"}