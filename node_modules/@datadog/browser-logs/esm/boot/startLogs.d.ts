import { Configuration, Context, ErrorObservable, InternalMonitoring, RawError, UserConfiguration } from '@datadog/browser-core';
import { Logger, LogsMessage } from '../domain/logger';
import { LoggerSession } from '../domain/loggerSession';
import { LogsEvent } from '../logsEvent.types';
export interface LogsUserConfiguration extends UserConfiguration {
    forwardErrorsToLogs?: boolean;
    beforeSend?: (event: LogsEvent) => void | boolean;
}
export declare function startLogs(userConfiguration: LogsUserConfiguration, errorLogger: Logger, getGlobalContext: () => Context): (message: LogsMessage, currentContext: Context) => void;
export declare function doStartLogs(configuration: Configuration, errorObservable: ErrorObservable, internalMonitoring: InternalMonitoring, session: LoggerSession, errorLogger: Logger, getGlobalContext: () => Context): (message: LogsMessage, currentContext: Context) => void;
export declare function buildAssemble(session: LoggerSession, configuration: Configuration, reportError: (error: RawError) => void): (message: LogsMessage, currentContext: Context) => Context | undefined;
